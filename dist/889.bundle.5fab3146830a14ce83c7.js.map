{"version":3,"file":"889.bundle.5fab3146830a14ce83c7.js","mappings":"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","sources":["webpack:///../../../extensions/dicom-microscopy/src/id.js","webpack:///../../../extensions/dicom-microscopy/src/utils/coordinateFormatScoord3d2Geometry.js","webpack:///../../../extensions/dicom-microscopy/src/utils/styles.js","webpack:///../../../extensions/dicom-microscopy/src/tools/viewerManager.js","webpack:///../../../extensions/dicom-microscopy/src/utils/RoiAnnotation.js","webpack:///../../../extensions/dicom-microscopy/src/utils/areaOfPolygon.js","webpack:///../../../extensions/dicom-microscopy/src/services/MicroscopyService.ts","webpack:///../../../extensions/dicom-microscopy/src/utils/callInputDialog.tsx","webpack:///../../../extensions/dicom-microscopy/src/components/MicroscopyPanel/MicroscopyPanel.tsx","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopySopClassHandler.js","webpack:///../../../extensions/dicom-microscopy/src/utils/dcmCodeValues.js","webpack:///../../../extensions/dicom-microscopy/src/utils/toArray.js","webpack:///../../../extensions/dicom-microscopy/src/utils/loadSR.js","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopySRSopClassHandler.js","webpack:///../../../extensions/dicom-microscopy/src/utils/getSourceDisplaySet.js","webpack:///../../../extensions/dicom-microscopy/src/index.tsx","webpack:///../../../extensions/dicom-microscopy/src/getPanelModule.tsx","webpack:///../../../extensions/dicom-microscopy/src/getCommandsModule.ts"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","import { inv, multiply } from 'mathjs';\r\n\r\n// TODO -> This is pulled out of some internal logic from Dicom Microscopy Viewer,\r\n// We should likely just expose this there.\r\n\r\nexport default function coordinateFormatScoord3d2Geometry(coordinates, pyramid) {\r\n  let transform = false;\r\n  if (!Array.isArray(coordinates[0])) {\r\n    coordinates = [coordinates];\r\n    transform = true;\r\n  }\r\n  const metadata = pyramid[pyramid.length - 1];\r\n  const orientation = metadata.ImageOrientationSlide;\r\n  const spacing = _getPixelSpacing(metadata);\r\n  const origin = metadata.TotalPixelMatrixOriginSequence[0];\r\n  const offset = [\r\n    Number(origin.XOffsetInSlideCoordinateSystem),\r\n    Number(origin.YOffsetInSlideCoordinateSystem),\r\n  ];\r\n\r\n  coordinates = coordinates.map(c => {\r\n    const slideCoord = [c[0], c[1]];\r\n    const pixelCoord = mapSlideCoord2PixelCoord({\r\n      offset,\r\n      orientation,\r\n      spacing,\r\n      point: slideCoord,\r\n    });\r\n    return [pixelCoord[0], -(pixelCoord[1] + 1), 0];\r\n  });\r\n  if (transform) {\r\n    return coordinates[0];\r\n  }\r\n  return coordinates;\r\n}\r\n\r\nfunction _getPixelSpacing(metadata) {\r\n  if (metadata.PixelSpacing) {\r\n    return metadata.PixelSpacing;\r\n  }\r\n  const functionalGroup = metadata.SharedFunctionalGroupsSequence[0];\r\n  const pixelMeasures = functionalGroup.PixelMeasuresSequence[0];\r\n  return pixelMeasures.PixelSpacing;\r\n}\r\n\r\nfunction mapSlideCoord2PixelCoord(options) {\r\n  // X and Y Offset in Slide Coordinate System\r\n  if (!('offset' in options)) {\r\n    throw new Error('Option \"offset\" is required.');\r\n  }\r\n  if (!Array.isArray(options.offset)) {\r\n    throw new Error('Option \"offset\" must be an array.');\r\n  }\r\n  if (options.offset.length !== 2) {\r\n    throw new Error('Option \"offset\" must be an array with 2 elements.');\r\n  }\r\n  const offset = options.offset;\r\n\r\n  // Image Orientation Slide with direction cosines for Row and Column direction\r\n  if (!('orientation' in options)) {\r\n    throw new Error('Option \"orientation\" is required.');\r\n  }\r\n  if (!Array.isArray(options.orientation)) {\r\n    throw new Error('Option \"orientation\" must be an array.');\r\n  }\r\n  if (options.orientation.length !== 6) {\r\n    throw new Error('Option \"orientation\" must be an array with 6 elements.');\r\n  }\r\n  const orientation = options.orientation;\r\n\r\n  // Pixel Spacing along the Row and Column direction\r\n  if (!('spacing' in options)) {\r\n    throw new Error('Option \"spacing\" is required.');\r\n  }\r\n  if (!Array.isArray(options.spacing)) {\r\n    throw new Error('Option \"spacing\" must be an array.');\r\n  }\r\n  if (options.spacing.length !== 2) {\r\n    throw new Error('Option \"spacing\" must be an array with 2 elements.');\r\n  }\r\n  const spacing = options.spacing;\r\n\r\n  // X and Y coordinate in the Slide Coordinate System\r\n  if (!('point' in options)) {\r\n    throw new Error('Option \"point\" is required.');\r\n  }\r\n  if (!Array.isArray(options.point)) {\r\n    throw new Error('Option \"point\" must be an array.');\r\n  }\r\n  if (options.point.length !== 2) {\r\n    throw new Error('Option \"point\" must be an array with 2 elements.');\r\n  }\r\n  const point = options.point;\r\n\r\n  const m = [\r\n    [orientation[0] * spacing[1], orientation[3] * spacing[0], offset[0]],\r\n    [orientation[1] * spacing[1], orientation[4] * spacing[0], offset[1]],\r\n    [0, 0, 1],\r\n  ];\r\n  const mInverted = inv(m);\r\n\r\n  const vSlide = [[point[0]], [point[1]], [1]];\r\n\r\n  const vImage = multiply(mInverted, vSlide);\r\n\r\n  const row = Number(vImage[1][0].toFixed(4));\r\n  const col = Number(vImage[0][0].toFixed(4));\r\n  return [col, row];\r\n}\r\n","const defaultFill = {\r\n  color: 'rgba(255,255,255,0.4)',\r\n};\r\n\r\nconst emptyFill = {\r\n  color: 'rgba(255,255,255,0.0)',\r\n};\r\n\r\nconst defaultStroke = {\r\n  color: 'rgb(0,255,0)',\r\n  width: 1.5,\r\n};\r\n\r\nconst activeStroke = {\r\n  color: 'rgb(255,255,0)',\r\n  width: 1.5,\r\n};\r\n\r\nconst defaultStyle = {\r\n  image: {\r\n    circle: {\r\n      fill: defaultFill,\r\n      stroke: activeStroke,\r\n      radius: 5,\r\n    },\r\n  },\r\n  fill: defaultFill,\r\n  stroke: activeStroke,\r\n};\r\n\r\nconst emptyStyle = {\r\n  image: {\r\n    circle: {\r\n      fill: emptyFill,\r\n      stroke: defaultStroke,\r\n      radius: 5,\r\n    },\r\n  },\r\n  fill: emptyFill,\r\n  stroke: defaultStroke,\r\n};\r\n\r\nconst styles = {\r\n  active: defaultStyle,\r\n  default: emptyStyle,\r\n};\r\n\r\nexport default styles;\r\n","import coordinateFormatScoord3d2Geometry from '../utils/coordinateFormatScoord3d2Geometry';\r\nimport styles from '../utils/styles';\r\n\r\nimport { PubSubService } from '@ohif/core';\r\n\r\n// Events from the third-party viewer\r\nconst ApiEvents = {\r\n  /** Triggered when a ROI was added. */\r\n  ROI_ADDED: 'dicommicroscopyviewer_roi_added',\r\n  /** Triggered when a ROI was modified. */\r\n  ROI_MODIFIED: 'dicommicroscopyviewer_roi_modified',\r\n  /** Triggered when a ROI was removed. */\r\n  ROI_REMOVED: 'dicommicroscopyviewer_roi_removed',\r\n  /** Triggered when a ROI was drawn. */\r\n  ROI_DRAWN: `dicommicroscopyviewer_roi_drawn`,\r\n  /** Triggered when a ROI was selected. */\r\n  ROI_SELECTED: `dicommicroscopyviewer_roi_selected`,\r\n  /** Triggered when a viewport move has started. */\r\n  MOVE_STARTED: `dicommicroscopyviewer_move_started`,\r\n  /** Triggered when a viewport move has ended. */\r\n  MOVE_ENDED: `dicommicroscopyviewer_move_ended`,\r\n  /** Triggered when a loading of data has started. */\r\n  LOADING_STARTED: `dicommicroscopyviewer_loading_started`,\r\n  /** Triggered when a loading of data has ended. */\r\n  LOADING_ENDED: `dicommicroscopyviewer_loading_ended`,\r\n  /** Triggered when an error occurs during loading of data. */\r\n  LOADING_ERROR: `dicommicroscopyviewer_loading_error`,\r\n  /* Triggered when the loading of an image tile has started. */\r\n  FRAME_LOADING_STARTED: `dicommicroscopyviewer_frame_loading_started`,\r\n  /* Triggered when the loading of an image tile has ended. */\r\n  FRAME_LOADING_ENDED: `dicommicroscopyviewer_frame_loading_ended`,\r\n  /* Triggered when the error occurs during loading of an image tile. */\r\n  FRAME_LOADING_ERROR: `dicommicroscopyviewer_frame_loading_ended`,\r\n};\r\n\r\nconst EVENTS = {\r\n  ADDED: 'added',\r\n  MODIFIED: 'modified',\r\n  REMOVED: 'removed',\r\n  UPDATED: 'updated',\r\n  SELECTED: 'selected',\r\n};\r\n\r\n/**\r\n * ViewerManager encapsulates the complexity of the third-party viewer and\r\n * expose only the features/behaviors that are relevant to the application\r\n */\r\nclass ViewerManager extends PubSubService {\r\n  constructor(viewer, viewportId, container, studyInstanceUID, seriesInstanceUID) {\r\n    super(EVENTS);\r\n    this.viewer = viewer;\r\n    this.viewportId = viewportId;\r\n    this.container = container;\r\n    this.studyInstanceUID = studyInstanceUID;\r\n    this.seriesInstanceUID = seriesInstanceUID;\r\n\r\n    this.onRoiAdded = this.roiAddedHandler.bind(this);\r\n    this.onRoiModified = this.roiModifiedHandler.bind(this);\r\n    this.onRoiRemoved = this.roiRemovedHandler.bind(this);\r\n    this.onRoiSelected = this.roiSelectedHandler.bind(this);\r\n    this.contextMenuCallback = () => {};\r\n\r\n    // init symbols\r\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\r\n    this._drawingSource = symbols.find(p => p.description === 'drawingSource');\r\n    this._pyramid = symbols.find(p => p.description === 'pyramid');\r\n    this._map = symbols.find(p => p.description === 'map');\r\n    this._affine = symbols.find(p => p.description === 'affine');\r\n\r\n    this.registerEvents();\r\n    this.activateDefaultInteractions();\r\n  }\r\n\r\n  addContextMenuCallback(callback) {\r\n    this.contextMenuCallback = callback;\r\n  }\r\n\r\n  /**\r\n   * Destroys this managed viewer instance, clearing all the event handlers\r\n   */\r\n  destroy() {\r\n    this.unregisterEvents();\r\n  }\r\n\r\n  /**\r\n   * This is to overrides the _broadcastEvent method of PubSubService and always\r\n   * send the ROI graphic object and this managed viewer instance.\r\n   * Due to the way that PubSubService is written, the same name override of the\r\n   * function doesn't work.\r\n   *\r\n   * @param {String} key key Subscription key\r\n   * @param {Object} roiGraphic ROI graphic object created by the third-party API\r\n   */\r\n  publish(key, roiGraphic) {\r\n    this._broadcastEvent(key, {\r\n      roiGraphic,\r\n      managedViewer: this,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers all the relevant event handlers for the third-party API\r\n   */\r\n  registerEvents() {\r\n    this.container.addEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\r\n    this.container.addEventListener(ApiEvents.ROI_MODIFIED, this.onRoiModified);\r\n    this.container.addEventListener(ApiEvents.ROI_REMOVED, this.onRoiRemoved);\r\n    this.container.addEventListener(ApiEvents.ROI_SELECTED, this.onRoiSelected);\r\n  }\r\n\r\n  /**\r\n   * Clears all the relevant event handlers for the third-party API\r\n   */\r\n  unregisterEvents() {\r\n    this.container.removeEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\r\n    this.container.removeEventListener(ApiEvents.ROI_MODIFIED, this.onRoiModified);\r\n    this.container.removeEventListener(ApiEvents.ROI_REMOVED, this.onRoiRemoved);\r\n    this.container.removeEventListener(ApiEvents.ROI_SELECTED, this.onRoiSelected);\r\n  }\r\n\r\n  /**\r\n   * Handles the ROI_ADDED event triggered by the third-party API\r\n   *\r\n   * @param {Event} event Event triggered by the third-party API\r\n   */\r\n  roiAddedHandler(event) {\r\n    const roiGraphic = event.detail.payload;\r\n    this.publish(EVENTS.ADDED, roiGraphic);\r\n    this.publish(EVENTS.UPDATED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Handles the ROI_MODIFIED event triggered by the third-party API\r\n   *\r\n   * @param {Event} event Event triggered by the third-party API\r\n   */\r\n  roiModifiedHandler(event) {\r\n    const roiGraphic = event.detail.payload;\r\n    this.publish(EVENTS.MODIFIED, roiGraphic);\r\n    this.publish(EVENTS.UPDATED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Handles the ROI_REMOVED event triggered by the third-party API\r\n   *\r\n   * @param {Event} event Event triggered by the third-party API\r\n   */\r\n  roiRemovedHandler(event) {\r\n    const roiGraphic = event.detail.payload;\r\n    this.publish(EVENTS.REMOVED, roiGraphic);\r\n    this.publish(EVENTS.UPDATED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Handles the ROI_SELECTED event triggered by the third-party API\r\n   *\r\n   * @param {Event} event Event triggered by the third-party API\r\n   */\r\n  roiSelectedHandler(event) {\r\n    const roiGraphic = event.detail.payload;\r\n    this.publish(EVENTS.SELECTED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Run the given callback operation without triggering any events for this\r\n   * instance, so subscribers will not be affected\r\n   *\r\n   * @param {Function} callback Callback that will run sinlently\r\n   */\r\n  runSilently(callback) {\r\n    this.unregisterEvents();\r\n    callback();\r\n    this.registerEvents();\r\n  }\r\n\r\n  /**\r\n   * Removes all the ROI graphics from the third-party API\r\n   */\r\n  clearRoiGraphics() {\r\n    this.runSilently(() => this.viewer.removeAllROIs());\r\n  }\r\n\r\n  showROIs() {\r\n    this.viewer.showROIs();\r\n  }\r\n\r\n  hideROIs() {\r\n    this.viewer.hideROIs();\r\n  }\r\n\r\n  /**\r\n   * Adds the given ROI graphic into the third-party API\r\n   *\r\n   * @param {Object} roiGraphic ROI graphic object to be added\r\n   */\r\n  addRoiGraphic(roiGraphic) {\r\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\r\n  }\r\n\r\n  /**\r\n   * Adds the given ROI graphic into the third-party API, and also add a label.\r\n   * Used for importing from SR.\r\n   *\r\n   * @param {Object} roiGraphic ROI graphic object to be added.\r\n   * @param {String} label The label of the annotation.\r\n   */\r\n  addRoiGraphicWithLabel(roiGraphic, label) {\r\n    // NOTE: Dicom Microscopy Viewer will override styles for \"Text\" evaluations\r\n    // to hide all other geometries, we are not going to use its label.\r\n    // if (label) {\r\n    //   if (!roiGraphic.properties) roiGraphic.properties = {};\r\n    //   roiGraphic.properties.label = label;\r\n    // }\r\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\r\n\r\n    this._broadcastEvent(EVENTS.ADDED, {\r\n      roiGraphic,\r\n      managedViewer: this,\r\n      label,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets ROI style\r\n   *\r\n   * @param {String} uid ROI graphic UID to be styled\r\n   * @param {object} styleOptions - Style options\r\n   * @param {object} styleOptions.stroke - Style options for the outline of the geometry\r\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\r\n   * @param {number} styleOptions.stroke.width - Width of the outline\r\n   * @param {object} styleOptions.fill - Style options for body the geometry\r\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\r\n   * @param {object} styleOptions.image - Style options for image\r\n   */\r\n  setROIStyle(uid, styleOptions) {\r\n    this.viewer.setROIStyle(uid, styleOptions);\r\n  }\r\n\r\n  /**\r\n   * Removes the ROI graphic with the given UID from the third-party API\r\n   *\r\n   * @param {String} uid ROI graphic UID to be removed\r\n   */\r\n  removeRoiGraphic(uid) {\r\n    this.viewer.removeROI(uid);\r\n  }\r\n\r\n  /**\r\n   * Update properties of regions of interest.\r\n   *\r\n   * @param {object} roi - ROI to be updated\r\n   * @param {string} roi.uid - Unique identifier of the region of interest\r\n   * @param {object} roi.properties - ROI properties\r\n   * @returns {void}\r\n   */\r\n  updateROIProperties({ uid, properties }) {\r\n    this.viewer.updateROI({ uid, properties });\r\n  }\r\n\r\n  /**\r\n   * Toggles overview map\r\n   *\r\n   * @returns {void}\r\n   */\r\n  toggleOverviewMap() {\r\n    this.viewer.toggleOverviewMap();\r\n  }\r\n\r\n  /**\r\n   * Activates the viewer default interactions\r\n   * @returns {void}\r\n   */\r\n  activateDefaultInteractions() {\r\n    /** Disable browser's native context menu inside the canvas */\r\n    document.querySelector('.DicomMicroscopyViewer').addEventListener(\r\n      'contextmenu',\r\n      event => {\r\n        event.preventDefault();\r\n        // comment out when context menu for microscopy is enabled\r\n        // if (typeof this.contextMenuCallback === 'function') {\r\n        //   this.contextMenuCallback(event);\r\n        // }\r\n      },\r\n      false\r\n    );\r\n    const defaultInteractions = [\r\n      [\r\n        'dragPan',\r\n        {\r\n          bindings: {\r\n            mouseButtons: ['middle'],\r\n          },\r\n        },\r\n      ],\r\n      [\r\n        'dragZoom',\r\n        {\r\n          bindings: {\r\n            mouseButtons: ['right'],\r\n          },\r\n        },\r\n      ],\r\n      ['modify', {}],\r\n    ];\r\n    this.activateInteractions(defaultInteractions);\r\n  }\r\n\r\n  /**\r\n   * Activates interactions\r\n   * @param {Array} interactions Interactions to be activated\r\n   * @returns {void}\r\n   */\r\n  activateInteractions(interactions) {\r\n    const interactionsMap = {\r\n      draw: activate => (activate ? 'activateDrawInteraction' : 'deactivateDrawInteraction'),\r\n      modify: activate => (activate ? 'activateModifyInteraction' : 'deactivateModifyInteraction'),\r\n      translate: activate =>\r\n        activate ? 'activateTranslateInteraction' : 'deactivateTranslateInteraction',\r\n      snap: activate => (activate ? 'activateSnapInteraction' : 'deactivateSnapInteraction'),\r\n      dragPan: activate =>\r\n        activate ? 'activateDragPanInteraction' : 'deactivateDragPanInteraction',\r\n      dragZoom: activate =>\r\n        activate ? 'activateDragZoomInteraction' : 'deactivateDragZoomInteraction',\r\n      select: activate => (activate ? 'activateSelectInteraction' : 'deactivateSelectInteraction'),\r\n    };\r\n\r\n    const availableInteractionsName = Object.keys(interactionsMap);\r\n    availableInteractionsName.forEach(availableInteractionName => {\r\n      const interaction = interactions.find(\r\n        interaction => interaction[0] === availableInteractionName\r\n      );\r\n      if (!interaction) {\r\n        const deactivateInteractionMethod = interactionsMap[availableInteractionName](false);\r\n        this.viewer[deactivateInteractionMethod]();\r\n      } else {\r\n        const [name, config] = interaction;\r\n        const activateInteractionMethod = interactionsMap[name](true);\r\n        this.viewer[activateInteractionMethod](config);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Accesses the internals of third-party API and returns the OpenLayers Map\r\n   *\r\n   * @returns {Object} OpenLayers Map component instance\r\n   */\r\n  _getMapView() {\r\n    const map = this._getMap();\r\n    return map.getView();\r\n  }\r\n\r\n  _getMap() {\r\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\r\n    const _map = symbols.find(s => String(s) === 'Symbol(map)');\r\n    window['map'] = this.viewer[_map];\r\n    return this.viewer[_map];\r\n  }\r\n\r\n  /**\r\n   * Returns the current state for the OpenLayers View\r\n   *\r\n   * @returns {Object} Current view state\r\n   */\r\n  getViewState() {\r\n    const view = this._getMapView();\r\n    return {\r\n      center: view.getCenter(),\r\n      resolution: view.getResolution(),\r\n      zoom: view.getZoom(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sets the current state for the OpenLayers View\r\n   *\r\n   * @param {Object} viewState View state to be applied\r\n   */\r\n  setViewState(viewState) {\r\n    const view = this._getMapView();\r\n\r\n    view.setZoom(viewState.zoom);\r\n    view.setResolution(viewState.resolution);\r\n    view.setCenter(viewState.center);\r\n  }\r\n\r\n  setViewStateByExtent(roiAnnotation) {\r\n    const coordinates = roiAnnotation.getCoordinates();\r\n\r\n    if (Array.isArray(coordinates[0]) && !coordinates[2]) {\r\n      this._jumpToPolyline(coordinates);\r\n    } else if (Array.isArray(coordinates[0])) {\r\n      this._jumpToPolygonOrEllipse(coordinates);\r\n    } else {\r\n      this._jumpToPoint(coordinates);\r\n    }\r\n  }\r\n\r\n  _jumpToPoint(coord) {\r\n    const pyramid = this.viewer[this._pyramid].metadata;\r\n\r\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\r\n    const view = this._getMapView();\r\n\r\n    view.setCenter(mappedCoord);\r\n  }\r\n\r\n  _jumpToPolyline(coord) {\r\n    const pyramid = this.viewer[this._pyramid].metadata;\r\n\r\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\r\n    const view = this._getMapView();\r\n\r\n    const x = mappedCoord[0];\r\n    const y = mappedCoord[1];\r\n\r\n    const xab = (x[0] + y[0]) / 2;\r\n    const yab = (x[1] + y[1]) / 2;\r\n    const midpoint = [xab, yab];\r\n\r\n    view.setCenter(midpoint);\r\n  }\r\n\r\n  _jumpToPolygonOrEllipse(coordinates) {\r\n    const pyramid = this.viewer[this._pyramid].metadata;\r\n\r\n    let minX = Infinity;\r\n    let maxX = -Infinity;\r\n    let minY = Infinity;\r\n    let maxY = -Infinity;\r\n\r\n    coordinates.forEach(coord => {\r\n      let mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\r\n\r\n      const [x, y] = mappedCoord;\r\n      if (x < minX) {\r\n        minX = x;\r\n      } else if (x > maxX) {\r\n        maxX = x;\r\n      }\r\n\r\n      if (y < minY) {\r\n        minY = y;\r\n      } else if (y > maxY) {\r\n        maxY = y;\r\n      }\r\n    });\r\n\r\n    const width = maxX - minX;\r\n    const height = maxY - minY;\r\n\r\n    minX -= 0.5 * width;\r\n    maxX += 0.5 * width;\r\n    minY -= 0.5 * height;\r\n    maxY += 0.5 * height;\r\n\r\n    const map = this._getMap();\r\n    map.getView().fit([minX, minY, maxX, maxY], map.getSize());\r\n  }\r\n}\r\n\r\nexport { EVENTS };\r\n\r\nexport default ViewerManager;\r\n","import areaOfPolygon from './areaOfPolygon';\r\n\r\nimport { PubSubService } from '@ohif/core';\r\n\r\nconst EVENTS = {\r\n  LABEL_UPDATED: 'labelUpdated',\r\n  GRAPHIC_UPDATED: 'graphicUpdated',\r\n  VIEW_UPDATED: 'viewUpdated',\r\n  REMOVED: 'removed',\r\n};\r\n\r\n/**\r\n * Represents a single annotation for the Microscopy Viewer\r\n */\r\nclass RoiAnnotation extends PubSubService {\r\n  constructor(roiGraphic, studyInstanceUID, seriesInstanceUID, label = '', viewState = null) {\r\n    super(EVENTS);\r\n    this.uid = roiGraphic.uid;\r\n    this.roiGraphic = roiGraphic;\r\n    this.studyInstanceUID = studyInstanceUID;\r\n    this.seriesInstanceUID = seriesInstanceUID;\r\n    this.label = label;\r\n    this.viewState = viewState;\r\n    this.setMeasurements(roiGraphic);\r\n  }\r\n\r\n  getScoord3d() {\r\n    const roiGraphic = this.roiGraphic;\r\n\r\n    const roiGraphicSymbols = Object.getOwnPropertySymbols(roiGraphic);\r\n    const _scoord3d = roiGraphicSymbols.find(s => String(s) === 'Symbol(scoord3d)');\r\n\r\n    return roiGraphic[_scoord3d];\r\n  }\r\n\r\n  getCoordinates() {\r\n    const scoord3d = this.getScoord3d();\r\n    const scoord3dSymbols = Object.getOwnPropertySymbols(scoord3d);\r\n\r\n    const _coordinates = scoord3dSymbols.find(s => String(s) === 'Symbol(coordinates)');\r\n\r\n    const coordinates = scoord3d[_coordinates];\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * When called will trigger the REMOVED event\r\n   */\r\n  destroy() {\r\n    this._broadcastEvent(EVENTS.REMOVED, this);\r\n  }\r\n\r\n  /**\r\n   * Updates the ROI graphic for the annotation and triggers the GRAPHIC_UPDATED\r\n   * event\r\n   *\r\n   * @param {Object} roiGraphic\r\n   */\r\n  setRoiGraphic(roiGraphic) {\r\n    this.roiGraphic = roiGraphic;\r\n    this.setMeasurements();\r\n    this._broadcastEvent(EVENTS.GRAPHIC_UPDATED, this);\r\n  }\r\n\r\n  /**\r\n   * Update ROI measurement values based on its scoord3d coordinates.\r\n   *\r\n   * @returns {void}\r\n   */\r\n  setMeasurements() {\r\n    const type = this.roiGraphic.scoord3d.graphicType;\r\n    const coordinates = this.roiGraphic.scoord3d.graphicData;\r\n\r\n    switch (type) {\r\n      case 'ELLIPSE':\r\n        // This is a circle so only need one side\r\n        const point1 = coordinates[0];\r\n        const point2 = coordinates[1];\r\n\r\n        let xLength2 = point2[0] - point1[0];\r\n        let yLength2 = point2[1] - point1[1];\r\n\r\n        xLength2 *= xLength2;\r\n        yLength2 *= yLength2;\r\n\r\n        const length = Math.sqrt(xLength2 + yLength2);\r\n        const radius = length / 2;\r\n\r\n        const areaEllipse = Math.PI * radius * radius;\r\n        this._area = areaEllipse;\r\n        this._length = undefined;\r\n        break;\r\n\r\n      case 'POLYGON':\r\n        const areaPolygon = areaOfPolygon(coordinates);\r\n        this._area = areaPolygon;\r\n        this._length = undefined;\r\n        break;\r\n\r\n      case 'POINT':\r\n        this._area = undefined;\r\n        this._length = undefined;\r\n        break;\r\n\r\n      case 'POLYLINE':\r\n        let len = 0;\r\n        for (let i = 1; i < coordinates.length; i++) {\r\n          const p1 = coordinates[i - 1];\r\n          const p2 = coordinates[i];\r\n\r\n          let xLen = p2[0] - p1[0];\r\n          let yLen = p2[1] - p1[1];\r\n\r\n          xLen *= xLen;\r\n          yLen *= yLen;\r\n          len += Math.sqrt(xLen + yLen);\r\n        }\r\n\r\n        this._area = undefined;\r\n        this._length = len;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the OpenLayer Map's view state for the annotation and triggers the\r\n   * VIEW_UPDATED event\r\n   *\r\n   * @param {Object} viewState The new view state for the annotation\r\n   */\r\n  setViewState(viewState) {\r\n    this.viewState = viewState;\r\n    this._broadcastEvent(EVENTS.VIEW_UPDATED, this);\r\n  }\r\n\r\n  /**\r\n   * Update the label for the annotation and triggers the LABEL_UPDATED event\r\n   *\r\n   * @param {String} label New label for the annotation\r\n   */\r\n  setLabel(label, finding) {\r\n    this.label = label || (finding && finding.CodeMeaning);\r\n    this.finding = finding || {\r\n      CodingSchemeDesignator: '@ohif/extension-dicom-microscopy',\r\n      CodeValue: label,\r\n      CodeMeaning: label,\r\n    };\r\n    this._broadcastEvent(EVENTS.LABEL_UPDATED, this);\r\n  }\r\n\r\n  /**\r\n   * Returns the geometry type of the annotation concatenated with the label\r\n   * defined for the annotation.\r\n   * Difference with getDetailedLabel() is that this will return empty string for empty\r\n   * label.\r\n   *\r\n   * @returns {String} Text with geometry type and label\r\n   */\r\n  getLabel() {\r\n    const label = this.label ? `${this.label}` : '';\r\n    return label;\r\n  }\r\n\r\n  /**\r\n   * Returns the geometry type of the annotation concatenated with the label\r\n   * defined for the annotation\r\n   *\r\n   * @returns {String} Text with geometry type and label\r\n   */\r\n  getDetailedLabel() {\r\n    const label = this.label ? `${this.label}` : '(empty)';\r\n    return label;\r\n  }\r\n\r\n  getLength() {\r\n    return this._length;\r\n  }\r\n\r\n  getArea() {\r\n    return this._area;\r\n  }\r\n}\r\n\r\nexport { EVENTS };\r\n\r\nexport default RoiAnnotation;\r\n","export default function areaOfPolygon(coordinates) {\r\n  // Shoelace algorithm.\r\n  const n = coordinates.length;\r\n  let area = 0.0;\r\n  let j = n - 1;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    area += (coordinates[j][0] + coordinates[i][0]) * (coordinates[j][1] - coordinates[i][1]);\r\n    j = i; // j is previous vertex to i\r\n  }\r\n\r\n  // Return absolute value of half the sum\r\n  // (The value is halved as we are summing up triangles, not rectangles).\r\n  return Math.abs(area / 2.0);\r\n}\r\n","import ViewerManager, { EVENTS as ViewerEvents } from '../tools/viewerManager';\r\nimport RoiAnnotation, { EVENTS as AnnotationEvents } from '../utils/RoiAnnotation';\r\nimport styles from '../utils/styles';\r\nimport { DicomMetadataStore, PubSubService } from '@ohif/core';\r\n\r\nconst EVENTS = {\r\n  ANNOTATION_UPDATED: 'annotationUpdated',\r\n  ANNOTATION_SELECTED: 'annotationSelected',\r\n  ANNOTATION_REMOVED: 'annotationRemoved',\r\n  RELABEL: 'relabel',\r\n  DELETE: 'delete',\r\n};\r\n\r\n/**\r\n * MicroscopyService is responsible to manage multiple third-party API's\r\n * microscopy viewers expose methods to manage the interaction with these\r\n * viewers and handle their ROI graphics to create, remove and modify the\r\n * ROI annotations relevant to the application\r\n */\r\nexport default class MicroscopyService extends PubSubService {\r\n  public static REGISTRATION = servicesManager => {\r\n    return {\r\n      name: 'microscopyService',\r\n      altName: 'MicroscopyService',\r\n      create: ({ configuration = {} }) => {\r\n        return new MicroscopyService(servicesManager);\r\n      },\r\n    };\r\n  };\r\n\r\n  servicesManager: any;\r\n\r\n  managedViewers = new Set();\r\n  roiUids = new Set();\r\n  annotations = {};\r\n  selectedAnnotation = null;\r\n  pendingFocus = false;\r\n\r\n  constructor(servicesManager) {\r\n    super(EVENTS);\r\n    this.servicesManager = servicesManager;\r\n    this._onRoiAdded = this._onRoiAdded.bind(this);\r\n    this._onRoiModified = this._onRoiModified.bind(this);\r\n    this._onRoiRemoved = this._onRoiRemoved.bind(this);\r\n    this._onRoiUpdated = this._onRoiUpdated.bind(this);\r\n    this._onRoiSelected = this._onRoiSelected.bind(this);\r\n    this.isROIsVisible = true;\r\n  }\r\n\r\n  /**\r\n   * Clears all the annotations and managed viewers, setting the manager state\r\n   * to its initial state\r\n   */\r\n  clear() {\r\n    this.managedViewers.forEach(managedViewer => managedViewer.destroy());\r\n    this.managedViewers.clear();\r\n    for (const key in this.annotations) {\r\n      delete this.annotations[key];\r\n    }\r\n\r\n    this.roiUids.clear();\r\n    this.selectedAnnotation = null;\r\n    this.pendingFocus = false;\r\n  }\r\n\r\n  clearAnnotations() {\r\n    Object.keys(this.annotations).forEach(uid => {\r\n      this.removeAnnotation(this.annotations[uid]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Observes when a ROI graphic is added, creating the correspondent annotation\r\n   * with the current graphic and view state.\r\n   * Creates a subscription for label updating for the created annotation and\r\n   * publishes an ANNOTATION_UPDATED event when it happens.\r\n   * Also triggers the relabel process after the graphic is placed.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The added ROI graphic object\r\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\r\n   */\r\n  _onRoiAdded(data) {\r\n    const { roiGraphic, managedViewer, label } = data;\r\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\r\n    const viewState = managedViewer.getViewState();\r\n\r\n    const roiAnnotation = new RoiAnnotation(\r\n      roiGraphic,\r\n      studyInstanceUID,\r\n      seriesInstanceUID,\r\n      '',\r\n      viewState\r\n    );\r\n\r\n    this.roiUids.add(roiGraphic.uid);\r\n    this.annotations[roiGraphic.uid] = roiAnnotation;\r\n\r\n    roiAnnotation.subscribe(AnnotationEvents.LABEL_UPDATED, () => {\r\n      this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, roiAnnotation);\r\n    });\r\n\r\n    if (label !== undefined) {\r\n      roiAnnotation.setLabel(label);\r\n    } else {\r\n      const onRelabel = item =>\r\n        managedViewer.updateROIProperties({\r\n          uid: roiGraphic.uid,\r\n          properties: { label: item.label, finding: item.finding },\r\n        });\r\n      this.triggerRelabel(roiAnnotation, true, onRelabel);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Observes when a ROI graphic is modified, updating the correspondent\r\n   * annotation with the current graphic and view state.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The modified ROI graphic object\r\n   */\r\n  _onRoiModified(data) {\r\n    const { roiGraphic, managedViewer } = data;\r\n    const roiAnnotation = this.getAnnotation(roiGraphic.uid);\r\n    if (!roiAnnotation) {\r\n      return;\r\n    }\r\n    roiAnnotation.setRoiGraphic(roiGraphic);\r\n    roiAnnotation.setViewState(managedViewer.getViewState());\r\n  }\r\n\r\n  /**\r\n   * Observes when a ROI graphic is removed, reflecting the removal in the\r\n   * annotations' state.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The removed ROI graphic object\r\n   */\r\n  _onRoiRemoved(data) {\r\n    const { roiGraphic } = data;\r\n    this.roiUids.delete(roiGraphic.uid);\r\n    this.annotations[roiGraphic.uid].destroy();\r\n    delete this.annotations[roiGraphic.uid];\r\n    this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Observes any changes on ROI graphics and synchronize all the managed\r\n   * viewers to reflect those changes.\r\n   * Also publishes an ANNOTATION_UPDATED event to notify the subscribers.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The added ROI graphic object\r\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\r\n   */\r\n  _onRoiUpdated(data) {\r\n    const { roiGraphic, managedViewer } = data;\r\n    this.synchronizeViewers(managedViewer);\r\n    this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, this.getAnnotation(roiGraphic.uid));\r\n  }\r\n\r\n  /**\r\n   * Observes when an ROI is selected.\r\n   * Also publishes an ANNOTATION_SELECTED event to notify the subscribers.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The added ROI graphic object\r\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\r\n   */\r\n  _onRoiSelected(data) {\r\n    const { roiGraphic } = data;\r\n    const selectedAnnotation = this.getAnnotation(roiGraphic.uid);\r\n    if (selectedAnnotation && selectedAnnotation !== this.getSelectedAnnotation()) {\r\n      if (this.selectedAnnotation) {\r\n        this.clearSelection();\r\n      }\r\n      this.selectedAnnotation = selectedAnnotation;\r\n      this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, selectedAnnotation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the subscriptions for the managed viewer being added\r\n   *\r\n   * @param {ViewerManager} managedViewer The viewer being added\r\n   */\r\n  _addManagedViewerSubscriptions(managedViewer) {\r\n    managedViewer._roiAddedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.ADDED,\r\n      this._onRoiAdded\r\n    );\r\n    managedViewer._roiModifiedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.MODIFIED,\r\n      this._onRoiModified\r\n    );\r\n    managedViewer._roiRemovedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.REMOVED,\r\n      this._onRoiRemoved\r\n    );\r\n    managedViewer._roiUpdatedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.UPDATED,\r\n      this._onRoiUpdated\r\n    );\r\n    managedViewer._roiSelectedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.UPDATED,\r\n      this._onRoiSelected\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Removes the subscriptions for the managed viewer being removed\r\n   *\r\n   * @param {ViewerManager} managedViewer The viewer being removed\r\n   */\r\n  _removeManagedViewerSubscriptions(managedViewer) {\r\n    managedViewer._roiAddedSubscription && managedViewer._roiAddedSubscription.unsubscribe();\r\n    managedViewer._roiModifiedSubscription && managedViewer._roiModifiedSubscription.unsubscribe();\r\n    managedViewer._roiRemovedSubscription && managedViewer._roiRemovedSubscription.unsubscribe();\r\n    managedViewer._roiUpdatedSubscription && managedViewer._roiUpdatedSubscription.unsubscribe();\r\n    managedViewer._roiSelectedSubscription && managedViewer._roiSelectedSubscription.unsubscribe();\r\n\r\n    managedViewer._roiAddedSubscription = null;\r\n    managedViewer._roiModifiedSubscription = null;\r\n    managedViewer._roiRemovedSubscription = null;\r\n    managedViewer._roiUpdatedSubscription = null;\r\n    managedViewer._roiSelectedSubscription = null;\r\n  }\r\n\r\n  /**\r\n   * Returns the managed viewers that are displaying the image with the given\r\n   * study and series UIDs\r\n   *\r\n   * @param {String} studyInstanceUID UID for the study\r\n   * @param {String} seriesInstanceUID UID for the series\r\n   *\r\n   * @returns {Array} The managed viewers for the given series UID\r\n   */\r\n  _getManagedViewersForSeries(studyInstanceUID, seriesInstanceUID) {\r\n    const filter = managedViewer =>\r\n      managedViewer.studyInstanceUID === studyInstanceUID &&\r\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\r\n    return Array.from(this.managedViewers).filter(filter);\r\n  }\r\n\r\n  /**\r\n   * Returns the managed viewers that are displaying the image with the given\r\n   * study UID\r\n   *\r\n   * @param {String} studyInstanceUID UID for the study\r\n   *\r\n   * @returns {Array} The managed viewers for the given series UID\r\n   */\r\n  getManagedViewersForStudy(studyInstanceUID) {\r\n    const filter = managedViewer => managedViewer.studyInstanceUID === studyInstanceUID;\r\n    return Array.from(this.managedViewers).filter(filter);\r\n  }\r\n\r\n  /**\r\n   * Restores the created annotations for the viewer being added\r\n   *\r\n   * @param {ViewerManager} managedViewer The viewer being added\r\n   */\r\n  _restoreAnnotations(managedViewer) {\r\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\r\n    const annotations = this.getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID);\r\n    annotations.forEach(roiAnnotation => {\r\n      managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a managed viewer instance for the given third-party API's viewer.\r\n   * Restores existing annotations for the given study/series.\r\n   * Adds event subscriptions for the viewer being added.\r\n   * Focuses the selected annotation when the viewer is being loaded into the\r\n   * active viewport.\r\n   *\r\n   * @param viewer - Third-party viewer API's object to be managed\r\n   * @param viewportId - The viewport Id where the viewer will be loaded\r\n   * @param container - The DOM element where it will be rendered\r\n   * @param studyInstanceUID - The study UID of the loaded image\r\n   * @param seriesInstanceUID - The series UID of the loaded image\r\n   * @param displaySets - All displaySets related to the same StudyInstanceUID\r\n   *\r\n   * @returns {ViewerManager} managed viewer\r\n   */\r\n  addViewer(viewer, viewportId, container, studyInstanceUID, seriesInstanceUID) {\r\n    const managedViewer = new ViewerManager(\r\n      viewer,\r\n      viewportId,\r\n      container,\r\n      studyInstanceUID,\r\n      seriesInstanceUID\r\n    );\r\n\r\n    this._restoreAnnotations(managedViewer);\r\n    viewer._manager = managedViewer;\r\n    this.managedViewers.add(managedViewer);\r\n\r\n    // this._potentiallyLoadSR(studyInstanceUID, displaySets);\r\n    this._addManagedViewerSubscriptions(managedViewer);\r\n\r\n    if (this.pendingFocus) {\r\n      this.pendingFocus = false;\r\n      this.focusAnnotation(this.selectedAnnotation, viewportId);\r\n    }\r\n\r\n    return managedViewer;\r\n  }\r\n\r\n  _potentiallyLoadSR(StudyInstanceUID, displaySets) {\r\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\r\n\r\n    const { FrameOfReferenceUID, othersFrameOfReferenceUID } = smDisplaySet;\r\n\r\n    if (!studyMetadata) {\r\n      return;\r\n    }\r\n\r\n    let derivedDisplaySets = FrameOfReferenceUID\r\n      ? displaySets.filter(\r\n          ds =>\r\n            ds.ReferencedFrameOfReferenceUID === FrameOfReferenceUID ||\r\n            // sometimes each depth instance has the different FrameOfReferenceID\r\n            othersFrameOfReferenceUID.includes(ds.ReferencedFrameOfReferenceUID)\r\n        )\r\n      : [];\r\n\r\n    if (!derivedDisplaySets.length) {\r\n      return;\r\n    }\r\n\r\n    derivedDisplaySets = derivedDisplaySets.filter(ds => ds.Modality === 'SR');\r\n\r\n    if (derivedDisplaySets.some(ds => ds.isLoaded === true)) {\r\n      // Don't auto load\r\n      return;\r\n    }\r\n\r\n    // find most recent and load it.\r\n    let recentDateTime = 0;\r\n    let recentDisplaySet = derivedDisplaySets[0];\r\n\r\n    derivedDisplaySets.forEach(ds => {\r\n      const dateTime = Number(`${ds.SeriesDate}${ds.SeriesTime}`);\r\n      if (dateTime > recentDateTime) {\r\n        recentDateTime = dateTime;\r\n        recentDisplaySet = ds;\r\n      }\r\n    });\r\n\r\n    recentDisplaySet.isLoading = true;\r\n\r\n    recentDisplaySet.load(smDisplaySet);\r\n  }\r\n\r\n  /**\r\n   * Removes the given third-party viewer API's object from the managed viewers\r\n   * and clears all its event subscriptions\r\n   *\r\n   * @param {Object} viewer Third-party viewer API's object to be removed\r\n   */\r\n  removeViewer(viewer) {\r\n    const managedViewer = viewer._manager;\r\n\r\n    this._removeManagedViewerSubscriptions(managedViewer);\r\n    managedViewer.destroy();\r\n    this.managedViewers.delete(managedViewer);\r\n  }\r\n\r\n  /**\r\n   * Toggle ROIs visibility\r\n   */\r\n  toggleROIsVisibility() {\r\n    this.isROIsVisible ? this.hideROIs() : this.showROIs;\r\n    this.isROIsVisible = !this.isROIsVisible;\r\n  }\r\n\r\n  /**\r\n   * Hide all ROIs\r\n   */\r\n  hideROIs() {\r\n    this.managedViewers.forEach(mv => mv.hideROIs());\r\n  }\r\n\r\n  /** Show all ROIs */\r\n  showROIs() {\r\n    this.managedViewers.forEach(mv => mv.showROIs());\r\n  }\r\n\r\n  /**\r\n   * Returns a RoiAnnotation instance for the given ROI UID\r\n   *\r\n   * @param {String} uid UID of the annotation\r\n   *\r\n   * @returns {RoiAnnotation} The RoiAnnotation instance found for the given UID\r\n   */\r\n  getAnnotation(uid) {\r\n    return this.annotations[uid];\r\n  }\r\n\r\n  /**\r\n   * Returns all the RoiAnnotation instances being managed\r\n   *\r\n   * @returns {Array} All RoiAnnotation instances\r\n   */\r\n  getAnnotations() {\r\n    const annotations = [];\r\n    Object.keys(this.annotations).forEach(uid => {\r\n      annotations.push(this.getAnnotation(uid));\r\n    });\r\n    return annotations;\r\n  }\r\n\r\n  /**\r\n   * Returns the RoiAnnotation instances registered with the given study UID\r\n   *\r\n   * @param {String} studyInstanceUID UID for the study\r\n   */\r\n  getAnnotationsForStudy(studyInstanceUID) {\r\n    const filter = a => a.studyInstanceUID === studyInstanceUID;\r\n    return this.getAnnotations().filter(filter);\r\n  }\r\n\r\n  /**\r\n   * Returns the RoiAnnotation instances registered with the given study and\r\n   * series UIDs\r\n   *\r\n   * @param {String} studyInstanceUID UID for the study\r\n   * @param {String} seriesInstanceUID UID for the series\r\n   */\r\n  getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID) {\r\n    const filter = annotation =>\r\n      annotation.studyInstanceUID === studyInstanceUID &&\r\n      annotation.seriesInstanceUID === seriesInstanceUID;\r\n    return this.getAnnotations().filter(filter);\r\n  }\r\n\r\n  /**\r\n   * Returns the selected RoiAnnotation instance or null if none is selected\r\n   *\r\n   * @returns {RoiAnnotation} The selected RoiAnnotation instance\r\n   */\r\n  getSelectedAnnotation() {\r\n    return this.selectedAnnotation;\r\n  }\r\n\r\n  /**\r\n   * Clear current RoiAnnotation selection\r\n   */\r\n  clearSelection() {\r\n    if (this.selectedAnnotation) {\r\n      this.setROIStyle(this.selectedAnnotation.uid, {\r\n        stroke: {\r\n          color: '#00ff00',\r\n        },\r\n      });\r\n    }\r\n    this.selectedAnnotation = null;\r\n  }\r\n\r\n  /**\r\n   * Selects the given RoiAnnotation instance, publishing an ANNOTATION_SELECTED\r\n   * event to notify all the subscribers\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation The instance to be selected\r\n   */\r\n  selectAnnotation(roiAnnotation) {\r\n    if (this.selectedAnnotation) {\r\n      this.clearSelection();\r\n    }\r\n\r\n    this.selectedAnnotation = roiAnnotation;\r\n    this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, roiAnnotation);\r\n    this.setROIStyle(roiAnnotation.uid, styles.active);\r\n  }\r\n\r\n  /**\r\n   * Toggles overview map\r\n   *\r\n   * @param viewportId The active viewport index\r\n   * @returns {void}\r\n   */\r\n  toggleOverviewMap(viewportId) {\r\n    const managedViewers = Array.from(this.managedViewers);\r\n    const managedViewer = managedViewers.find(mv => mv.viewportId === viewportId);\r\n    if (managedViewer) {\r\n      managedViewer.toggleOverviewMap();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a RoiAnnotation instance from the managed annotations and reflects\r\n   * its removal on all third-party viewers being managed\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation The instance to be removed\r\n   */\r\n  removeAnnotation(roiAnnotation) {\r\n    const { uid, studyInstanceUID, seriesInstanceUID } = roiAnnotation;\r\n    const filter = managedViewer =>\r\n      managedViewer.studyInstanceUID === studyInstanceUID &&\r\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\r\n\r\n    const managedViewers = Array.from(this.managedViewers).filter(filter);\r\n\r\n    managedViewers.forEach(managedViewer => managedViewer.removeRoiGraphic(uid));\r\n\r\n    if (this.annotations[uid]) {\r\n      this.roiUids.delete(uid);\r\n      this.annotations[uid].destroy();\r\n      delete this.annotations[uid];\r\n\r\n      this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiAnnotation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the given RoiAnnotation instance by changing the OpenLayers' Map view\r\n   * state of the managed viewer with the given viewport index.\r\n   * If the image for the given annotation is not yet loaded into the viewport,\r\n   * it will set a pendingFocus flag to true in order to perform the focus when\r\n   * the managed viewer instance is created.\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation RoiAnnotation instance to be focused\r\n   * @param {string} viewportId Index of the viewport to focus\r\n   */\r\n  focusAnnotation(roiAnnotation, viewportId) {\r\n    const filter = mv => mv.viewportId === viewportId;\r\n    const managedViewer = Array.from(this.managedViewers).find(filter);\r\n    if (managedViewer) {\r\n      managedViewer.setViewStateByExtent(roiAnnotation);\r\n    } else {\r\n      this.pendingFocus = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Synchronize the ROI graphics for all the managed viewers that has the same\r\n   * series UID of the given managed viewer\r\n   *\r\n   * @param {ViewerManager} baseManagedViewer Reference managed viewer\r\n   */\r\n  synchronizeViewers(baseManagedViewer) {\r\n    const { studyInstanceUID, seriesInstanceUID } = baseManagedViewer;\r\n    const managedViewers = this._getManagedViewersForSeries(studyInstanceUID, seriesInstanceUID);\r\n\r\n    // Prevent infinite loops arrising from updates.\r\n    managedViewers.forEach(managedViewer => this._removeManagedViewerSubscriptions(managedViewer));\r\n\r\n    managedViewers.forEach(managedViewer => {\r\n      if (managedViewer === baseManagedViewer) {\r\n        return;\r\n      }\r\n\r\n      const annotations = this.getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID);\r\n      managedViewer.clearRoiGraphics();\r\n      annotations.forEach(roiAnnotation => {\r\n        managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\r\n      });\r\n    });\r\n\r\n    managedViewers.forEach(managedViewer => this._addManagedViewerSubscriptions(managedViewer));\r\n  }\r\n\r\n  /**\r\n   * Activates interactions across all the viewers being managed\r\n   *\r\n   * @param {Array} interactions interactions\r\n   */\r\n  activateInteractions(interactions) {\r\n    this.managedViewers.forEach(mv => mv.activateInteractions(interactions));\r\n    this.activeInteractions = interactions;\r\n  }\r\n\r\n  getActiveInteractions() {\r\n    return this.activeInteractions;\r\n  }\r\n\r\n  /**\r\n   * Triggers the relabelling process for the given RoiAnnotation instance, by\r\n   * publishing the RELABEL event to notify the subscribers\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation The instance to be relabelled\r\n   * @param {boolean} newAnnotation Whether the annotation is newly drawn (so it deletes on cancel).\r\n   */\r\n  triggerRelabel(roiAnnotation, newAnnotation = false, onRelabel) {\r\n    if (!onRelabel) {\r\n      onRelabel = ({ label }) =>\r\n        this.managedViewers.forEach(mv =>\r\n          mv.updateROIProperties({\r\n            uid: roiAnnotation.uid,\r\n            properties: { label },\r\n          })\r\n        );\r\n    }\r\n\r\n    this._broadcastEvent(EVENTS.RELABEL, {\r\n      roiAnnotation,\r\n      deleteCallback: () => this.removeAnnotation(roiAnnotation),\r\n      successCallback: onRelabel,\r\n      newAnnotation,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Triggers the deletion process for the given RoiAnnotation instance, by\r\n   * publishing the DELETE event to notify the subscribers\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation The instance to be deleted\r\n   */\r\n  triggerDelete(roiAnnotation) {\r\n    this._broadcastEvent(EVENTS.DELETE, roiAnnotation);\r\n  }\r\n\r\n  /**\r\n   * Set ROI style for all managed viewers\r\n   *\r\n   * @param {string} uid The ROI uid that will be styled\r\n   * @param {object} styleOptions - Style options\r\n   * @param {object*} styleOptions.stroke - Style options for the outline of the geometry\r\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\r\n   * @param {number} styleOptions.stroke.width - Width of the outline\r\n   * @param {object*} styleOptions.fill - Style options for body the geometry\r\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\r\n   * @param {object*} styleOptions.image - Style options for image\r\n   */\r\n  setROIStyle(uid, styleOptions) {\r\n    this.managedViewers.forEach(mv => mv.setROIStyle(uid, styleOptions));\r\n  }\r\n}\r\n\r\nexport { EVENTS };\r\n","import React from 'react';\r\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\r\n\r\n/**\r\n *\r\n * @param {*} data\r\n * @param {*} data.text\r\n * @param {*} data.label\r\n * @param {*} event\r\n * @param {func} callback\r\n * @param {*} isArrowAnnotateInputDialog\r\n */\r\nexport default function callInputDialog({\r\n  uiDialogService,\r\n  title = 'Annotation',\r\n  defaultValue = '',\r\n  callback = (value: string, action: string) => {},\r\n}) {\r\n  const dialogId = 'microscopy-input-dialog';\r\n\r\n  const onSubmitHandler = ({ action, value }) => {\r\n    switch (action.id) {\r\n      case 'save':\r\n        callback(value.value, action.id);\r\n        break;\r\n      case 'cancel':\r\n        callback('', action.id);\r\n        break;\r\n    }\r\n    uiDialogService.dismiss({ id: dialogId });\r\n  };\r\n\r\n  if (uiDialogService) {\r\n    uiDialogService.create({\r\n      id: dialogId,\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: title,\r\n        value: { value: defaultValue },\r\n        noCloseButton: true,\r\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\r\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\r\n        ],\r\n        onSubmit: onSubmitHandler,\r\n        body: ({ value, setValue }) => {\r\n          return (\r\n            <Input\r\n              label=\"Enter your annotation\"\r\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\r\n              autoFocus\r\n              className=\"border-primary-main bg-black\"\r\n              type=\"text\"\r\n              value={value.defaultValue}\r\n              onChange={event => {\r\n                event.persist();\r\n                setValue(value => ({ ...value, value: event.target.value }));\r\n              }}\r\n              onKeyPress={event => {\r\n                if (event.key === 'Enter') {\r\n                  onSubmitHandler({ value, action: { id: 'save' } });\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        },\r\n      },\r\n    });\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ExtensionManager, CommandsManager, DicomMetadataStore } from '@ohif/core';\r\nimport { MeasurementTable } from '@ohif/ui';\r\nimport { withTranslation, WithTranslation } from 'react-i18next';\r\nimport { EVENTS as MicroscopyEvents } from '../../services/MicroscopyService';\r\nimport dcmjs from 'dcmjs';\r\nimport callInputDialog from '../../utils/callInputDialog';\r\nimport constructSR from '../../utils/constructSR';\r\nimport { saveByteArray } from '../../utils/saveByteArray';\r\n\r\nlet saving = false;\r\nconst { datasetToBuffer } = dcmjs.data;\r\n\r\nconst formatArea = area => {\r\n  let mult = 1;\r\n  let unit = 'mm';\r\n  if (area > 1000000) {\r\n    unit = 'm';\r\n    mult = 1 / 1000000;\r\n  } else if (area < 1) {\r\n    unit = 'μm';\r\n    mult = 1000000;\r\n  }\r\n  return `${(area * mult).toFixed(2)} ${unit}²`;\r\n};\r\n\r\nconst formatLength = (length, unit) => {\r\n  let mult = 1;\r\n  if (unit == 'km' || (!unit && length > 1000000)) {\r\n    unit = 'km';\r\n    mult = 1 / 1000000;\r\n  } else if (unit == 'm' || (!unit && length > 1000)) {\r\n    unit = 'm';\r\n    mult = 1 / 1000;\r\n  } else if (unit == 'μm' || (!unit && length < 1)) {\r\n    unit = 'μm';\r\n    mult = 1000;\r\n  } else if (unit && unit != 'mm') {\r\n    throw new Error(`Unknown length unit ${unit}`);\r\n  } else {\r\n    unit = 'mm';\r\n  }\r\n  return `${(length * mult).toFixed(2)} ${unit}`;\r\n};\r\n\r\ninterface IMicroscopyPanelProps extends WithTranslation {\r\n  viewports: PropTypes.array;\r\n  activeViewportId: PropTypes.string;\r\n\r\n  //\r\n  onSaveComplete?: PropTypes.func; // callback when successfully saved annotations\r\n  onRejectComplete?: PropTypes.func; // callback when rejected annotations\r\n\r\n  //\r\n  servicesManager: AppTypes.ServicesManager;\r\n  extensionManager: ExtensionManager;\r\n  commandsManager: CommandsManager;\r\n}\r\n\r\n/**\r\n * Microscopy Measurements Panel Component\r\n *\r\n * @param props\r\n * @returns\r\n */\r\nfunction MicroscopyPanel(props: IMicroscopyPanelProps) {\r\n  const { microscopyService } = props.servicesManager.services;\r\n\r\n  const [studyInstanceUID, setStudyInstanceUID] = useState(null as string | null);\r\n  const [roiAnnotations, setRoiAnnotations] = useState([] as any[]);\r\n  const [selectedAnnotation, setSelectedAnnotation] = useState(null as any);\r\n  const { servicesManager, extensionManager } = props;\r\n\r\n  const { uiDialogService, displaySetService } = servicesManager.services;\r\n\r\n  useEffect(() => {\r\n    const viewport = props.viewports.get(props.activeViewportId);\r\n    if (viewport?.displaySetInstanceUIDs[0]) {\r\n      const displaySet = displaySetService.getDisplaySetByUID(viewport.displaySetInstanceUIDs[0]);\r\n      if (displaySet) {\r\n        setStudyInstanceUID(displaySet.StudyInstanceUID);\r\n      }\r\n    }\r\n  }, [props.viewports, props.activeViewportId]);\r\n\r\n  useEffect(() => {\r\n    const onAnnotationUpdated = () => {\r\n      const roiAnnotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\r\n      setRoiAnnotations(roiAnnotations);\r\n    };\r\n\r\n    const onAnnotationSelected = () => {\r\n      const selectedAnnotation = microscopyService.getSelectedAnnotation();\r\n      setSelectedAnnotation(selectedAnnotation);\r\n    };\r\n\r\n    const onAnnotationRemoved = () => {\r\n      onAnnotationUpdated();\r\n    };\r\n\r\n    const { unsubscribe: unsubscribeAnnotationUpdated } = microscopyService.subscribe(\r\n      MicroscopyEvents.ANNOTATION_UPDATED,\r\n      onAnnotationUpdated\r\n    );\r\n    const { unsubscribe: unsubscribeAnnotationSelected } = microscopyService.subscribe(\r\n      MicroscopyEvents.ANNOTATION_SELECTED,\r\n      onAnnotationSelected\r\n    );\r\n    const { unsubscribe: unsubscribeAnnotationRemoved } = microscopyService.subscribe(\r\n      MicroscopyEvents.ANNOTATION_REMOVED,\r\n      onAnnotationRemoved\r\n    );\r\n    onAnnotationUpdated();\r\n    onAnnotationSelected();\r\n\r\n    // on unload unsubscribe from events\r\n    return () => {\r\n      unsubscribeAnnotationUpdated();\r\n      unsubscribeAnnotationSelected();\r\n      unsubscribeAnnotationRemoved();\r\n    };\r\n  }, [studyInstanceUID]);\r\n\r\n  /**\r\n   * On clicking \"Save Annotations\" button, prompt an input modal for the\r\n   * new series' description, and continue to save.\r\n   *\r\n   * @returns\r\n   */\r\n  const promptSave = () => {\r\n    const annotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\r\n\r\n    if (!annotations || saving) {\r\n      return;\r\n    }\r\n\r\n    callInputDialog({\r\n      uiDialogService,\r\n      title: 'Enter description of the Series',\r\n      defaultValue: '',\r\n      callback: (value: string, action: string) => {\r\n        switch (action) {\r\n          case 'save': {\r\n            saveFunction(value);\r\n          }\r\n        }\r\n      },\r\n    });\r\n  };\r\n\r\n  const getAllDisplaySets = (studyMetadata: any) => {\r\n    let allDisplaySets = [] as any[];\r\n    studyMetadata.series.forEach((series: any) => {\r\n      const displaySets = displaySetService.getDisplaySetsForSeries(series.SeriesInstanceUID);\r\n      allDisplaySets = allDisplaySets.concat(displaySets);\r\n    });\r\n    return allDisplaySets;\r\n  };\r\n\r\n  /**\r\n   * Save annotations as a series\r\n   *\r\n   * @param SeriesDescription - series description\r\n   * @returns\r\n   */\r\n  const saveFunction = async (SeriesDescription: string) => {\r\n    const dataSource = extensionManager.getActiveDataSource()[0];\r\n    const { onSaveComplete } = props;\r\n    const annotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\r\n\r\n    saving = true;\r\n\r\n    // There is only one viewer possible for one study,\r\n    // Since once study contains multiple resolution levels (series) of one whole\r\n    // Slide image.\r\n\r\n    const studyMetadata = DicomMetadataStore.getStudy(studyInstanceUID);\r\n    const displaySets = getAllDisplaySets(studyMetadata);\r\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\r\n\r\n    // Get the next available series number after 4700.\r\n\r\n    const dsWithMetadata = displaySets.filter(\r\n      ds => ds.metadata && ds.metadata.SeriesNumber && typeof ds.metadata.SeriesNumber === 'number'\r\n    );\r\n\r\n    // Generate next series number\r\n    const seriesNumbers = dsWithMetadata.map(ds => ds.metadata.SeriesNumber);\r\n    const maxSeriesNumber = Math.max(...seriesNumbers, 4700);\r\n    const SeriesNumber = maxSeriesNumber + 1;\r\n\r\n    const { instance: metadata } = smDisplaySet;\r\n\r\n    // construct SR dataset\r\n    const dataset = constructSR(metadata, { SeriesDescription, SeriesNumber }, annotations);\r\n\r\n    // Save in DICOM format\r\n    try {\r\n      if (dataSource) {\r\n        if (dataSource.wadoRoot == 'saveDicom') {\r\n          // download as DICOM file\r\n          const part10Buffer = datasetToBuffer(dataset);\r\n          saveByteArray(part10Buffer, `sr-microscopy.dcm`);\r\n        } else {\r\n          // Save into Web Data source\r\n          const { StudyInstanceUID } = dataset;\r\n          await dataSource.store.dicom(dataset);\r\n          if (StudyInstanceUID) {\r\n            dataSource.deleteStudyMetadataPromise(StudyInstanceUID);\r\n          }\r\n        }\r\n        onSaveComplete({\r\n          title: 'SR Saved',\r\n          message: 'Measurements downloaded successfully',\r\n          type: 'success',\r\n        });\r\n      } else {\r\n        console.error('Server unspecified');\r\n      }\r\n    } catch (error) {\r\n      onSaveComplete({\r\n        title: 'SR Save Failed',\r\n        message: error.message || error.toString(),\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      saving = false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * On clicking \"Reject annotations\" button\r\n   */\r\n  const onDeleteCurrentSRHandler = async () => {\r\n    try {\r\n      const activeViewport = props.viewports[props.activeViewportId];\r\n      const { StudyInstanceUID } = activeViewport;\r\n\r\n      // TODO: studies?\r\n      const study = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n\r\n      const lastDerivedDisplaySet = study.derivedDisplaySets.sort((ds1: any, ds2: any) => {\r\n        const dateTime1 = Number(`${ds1.SeriesDate}${ds1.SeriesTime}`);\r\n        const dateTime2 = Number(`${ds2.SeriesDate}${ds2.SeriesTime}`);\r\n        return dateTime1 > dateTime2;\r\n      })[study.derivedDisplaySets.length - 1];\r\n\r\n      // TODO: use dataSource.reject.dicom()\r\n      // await DICOMSR.rejectMeasurements(\r\n      //   study.wadoRoot,\r\n      //   lastDerivedDisplaySet.StudyInstanceUID,\r\n      //   lastDerivedDisplaySet.SeriesInstanceUID\r\n      // );\r\n      props.onRejectComplete({\r\n        title: 'Report rejected',\r\n        message: 'Latest report rejected successfully',\r\n        type: 'success',\r\n      });\r\n    } catch (error) {\r\n      props.onRejectComplete({\r\n        title: 'Failed to reject report',\r\n        message: error.message,\r\n        type: 'error',\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handler for clicking event of an annotation item.\r\n   *\r\n   * @param param0\r\n   */\r\n  const onMeasurementItemClickHandler = ({ uid }: { uid: string }) => {\r\n    const roiAnnotation = microscopyService.getAnnotation(uid);\r\n    microscopyService.selectAnnotation(roiAnnotation);\r\n    microscopyService.focusAnnotation(roiAnnotation, props.activeViewportId);\r\n  };\r\n\r\n  /**\r\n   * Handler for \"Edit\" action of an annotation item\r\n   * @param param0\r\n   */\r\n  const onMeasurementItemEditHandler = ({ uid, isActive }: { uid: string; isActive: boolean }) => {\r\n    props.commandsManager.runCommand('setLabel', { uid }, 'MICROSCOPY');\r\n  };\r\n\r\n  const onMeasurementDeleteHandler = ({ uid, isActive }: { uid: string; isActive: boolean }) => {\r\n    const roiAnnotation = microscopyService.getAnnotation(uid);\r\n    microscopyService.removeAnnotation(roiAnnotation);\r\n  };\r\n\r\n  // Convert ROI annotations managed by microscopyService into our\r\n  // own format for display\r\n  const data = roiAnnotations.map((roiAnnotation, index) => {\r\n    const label = roiAnnotation.getDetailedLabel();\r\n    const area = roiAnnotation.getArea();\r\n    const length = roiAnnotation.getLength();\r\n    const shortAxisLength = roiAnnotation.roiGraphic.properties.shortAxisLength;\r\n    const isSelected: boolean = selectedAnnotation === roiAnnotation;\r\n\r\n    // other events\r\n    const { uid } = roiAnnotation;\r\n\r\n    // display text\r\n    const displayText = [];\r\n\r\n    if (area !== undefined) {\r\n      displayText.push(formatArea(area));\r\n    } else if (length !== undefined) {\r\n      displayText.push(\r\n        shortAxisLength\r\n          ? `${formatLength(length, 'μm')} x ${formatLength(shortAxisLength, 'μm')}`\r\n          : `${formatLength(length, 'μm')}`\r\n      );\r\n    }\r\n\r\n    // convert to measurementItem format compatible with <MeasurementTable /> component\r\n    return {\r\n      uid,\r\n      index,\r\n      label,\r\n      isActive: isSelected,\r\n      displayText,\r\n      roiAnnotation,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"ohif-scrollbar overflow-y-auto overflow-x-hidden\"\r\n        data-cy={'measurements-panel'}\r\n      >\r\n        <MeasurementTable\r\n          title=\"Measurements\"\r\n          servicesManager={props.servicesManager}\r\n          data={data}\r\n          onClick={onMeasurementItemClickHandler}\r\n          onEdit={onMeasurementItemEditHandler}\r\n          onDelete={onMeasurementDeleteHandler}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst connectedMicroscopyPanel = withTranslation(['MicroscopyTable', 'Common'])(MicroscopyPanel);\r\n\r\nexport default connectedMicroscopyPanel;\r\n","import OHIF from '@ohif/core';\r\n\r\nconst { utils } = OHIF;\r\n\r\nconst SOP_CLASS_UIDS = {\r\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.6',\r\n};\r\n\r\nconst SOPClassHandlerId =\r\n  '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySopClassHandler';\r\n\r\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\r\n  // If the series has no instances, stop here\r\n  if (!instances || !instances.length) {\r\n    throw new Error('No instances were provided');\r\n  }\r\n\r\n  const instance = instances[0];\r\n\r\n  let singleFrameInstance = instance;\r\n  let currentFrames = +singleFrameInstance.NumberOfFrames || 1;\r\n  for (const instanceI of instances) {\r\n    const framesI = +instanceI.NumberOfFrames || 1;\r\n    if (framesI < currentFrames) {\r\n      singleFrameInstance = instanceI;\r\n      currentFrames = framesI;\r\n    }\r\n  }\r\n  let imageIdForThumbnail = null;\r\n  if (singleFrameInstance) {\r\n    if (currentFrames == 1) {\r\n      // Not all DICOM server implementations support thumbnail service,\r\n      // So if we have a single-frame image, we will prefer it.\r\n      imageIdForThumbnail = singleFrameInstance.imageId;\r\n    }\r\n    if (!imageIdForThumbnail) {\r\n      // use the thumbnail service provided by DICOM server\r\n      const dataSource = extensionManager.getActiveDataSource()[0];\r\n      imageIdForThumbnail = dataSource.getImageIdsForInstance({\r\n        instance: singleFrameInstance,\r\n        thumbnail: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  const {\r\n    FrameOfReferenceUID,\r\n    SeriesDescription,\r\n    ContentDate,\r\n    ContentTime,\r\n    SeriesNumber,\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SOPClassUID,\r\n  } = instance;\r\n\r\n  instances = instances.map(inst => {\r\n    // NOTE: According to DICOM standard a series should have a FrameOfReferenceUID\r\n    // When the Microscopy file was built by certain tool from multiple image files,\r\n    // each instance's FrameOfReferenceUID is sometimes different.\r\n    // Even though this means the file was not well formatted DICOM VL Whole Slide Microscopy Image,\r\n    // the case is so often, so let's override this value manually here.\r\n    //\r\n    // https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.4.html#sect_C.7.4.1.1.1\r\n\r\n    inst.FrameOfReferenceUID = instance.FrameOfReferenceUID;\r\n\r\n    return inst;\r\n  });\r\n\r\n  const othersFrameOfReferenceUID = instances\r\n    .filter(v => v)\r\n    .map(inst => inst.FrameOfReferenceUID)\r\n    .filter((value, index, array) => array.indexOf(value) === index);\r\n  if (othersFrameOfReferenceUID.length > 1) {\r\n    console.warn(\r\n      'Expected FrameOfReferenceUID of difference instances within a series to be the same, found multiple different values',\r\n      othersFrameOfReferenceUID\r\n    );\r\n  }\r\n\r\n  const displaySet = {\r\n    plugin: 'microscopy',\r\n    Modality: 'SM',\r\n    altImageText: 'Microscopy',\r\n    displaySetInstanceUID: utils.guid(),\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    FrameOfReferenceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    SeriesDescription: SeriesDescription || 'Microscopy Data',\r\n    // Map ContentDate/Time to SeriesTime for series list sorting.\r\n    SeriesDate: ContentDate,\r\n    SeriesTime: ContentTime,\r\n    SeriesNumber,\r\n    firstInstance: singleFrameInstance, // top level instance in the image Pyramid\r\n    instance,\r\n    numImageFrames: 0,\r\n    numInstances: 1,\r\n    imageIdForThumbnail, // thumbnail image\r\n    others: instances, // all other level instances in the image Pyramid\r\n    othersFrameOfReferenceUID,\r\n  };\r\n\r\n  return [displaySet];\r\n}\r\n\r\nexport default function getDicomMicroscopySopClassHandler({ servicesManager, extensionManager }) {\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n\r\n  return {\r\n    name: 'DicomMicroscopySopClassHandler',\r\n    sopClassUids: [SOP_CLASS_UIDS.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE],\r\n    getDisplaySetsFromSeries,\r\n  };\r\n}\r\n","const DCM_CODE_VALUES = {\r\n  IMAGING_MEASUREMENTS: '126010',\r\n  MEASUREMENT_GROUP: '125007',\r\n  IMAGE_REGION: '111030',\r\n  FINDING: '121071',\r\n  TRACKING_UNIQUE_IDENTIFIER: '112039',\r\n  LENGTH: '410668003',\r\n  AREA: '42798000',\r\n  SHORT_AXIS: 'G-A186',\r\n  LONG_AXIS: 'G-A185',\r\n  ELLIPSE_AREA: 'G-D7FE', // TODO: Remove this\r\n};\r\n\r\nexport default DCM_CODE_VALUES;\r\n","export default function toArray(item) {\r\n  return Array.isArray(item) ? item : [item];\r\n}\r\n","import dcmjs from 'dcmjs';\r\n\r\nimport DCM_CODE_VALUES from './dcmCodeValues';\r\nimport toArray from './toArray';\r\n\r\nconst MeasurementReport = dcmjs.adapters.DICOMMicroscopyViewer.MeasurementReport;\r\n\r\n// Define as async so that it returns a promise, expected by the ViewportGrid\r\nexport default async function loadSR(\r\n  microscopyService,\r\n  microscopySRDisplaySet,\r\n  referencedDisplaySet\r\n) {\r\n  const naturalizedDataset = microscopySRDisplaySet.metadata;\r\n\r\n  const { StudyInstanceUID, FrameOfReferenceUID } = referencedDisplaySet;\r\n\r\n  const managedViewers = microscopyService.getManagedViewersForStudy(StudyInstanceUID);\r\n\r\n  if (!managedViewers || !managedViewers.length) {\r\n    return;\r\n  }\r\n\r\n  microscopySRDisplaySet.isLoaded = true;\r\n\r\n  const { rois, labels } = await _getROIsFromToolState(naturalizedDataset, FrameOfReferenceUID);\r\n\r\n  const managedViewer = managedViewers[0];\r\n\r\n  for (let i = 0; i < rois.length; i++) {\r\n    // NOTE: When saving Microscopy SR, we are attaching identifier property\r\n    // to each ROI, and when read for display, it is coming in as \"TEXT\"\r\n    // evaluation.\r\n    // As the Dicom Microscopy Viewer will override styles for \"Text\" evaluations\r\n    // to hide all other geometries, we are going to manually remove that\r\n    // evaluation item.\r\n    const roi = rois[i];\r\n    const roiSymbols = Object.getOwnPropertySymbols(roi);\r\n    const _properties = roiSymbols.find(s => s.description === 'properties');\r\n    const properties = roi[_properties];\r\n    properties['evaluations'] = [];\r\n\r\n    managedViewer.addRoiGraphicWithLabel(roi, labels[i]);\r\n  }\r\n}\r\n\r\nasync function _getROIsFromToolState(naturalizedDataset, FrameOfReferenceUID) {\r\n  const toolState = MeasurementReport.generateToolState(naturalizedDataset);\r\n  const tools = Object.getOwnPropertyNames(toolState);\r\n\r\n  const DICOMMicroscopyViewer = await import(\r\n    /* webpackChunkName: \"dicom-microscopy-viewer\" */ 'dicom-microscopy-viewer'\r\n  );\r\n\r\n  const measurementGroupContentItems = _getMeasurementGroups(naturalizedDataset);\r\n\r\n  const rois = [];\r\n  const labels = [];\r\n\r\n  tools.forEach(t => {\r\n    const toolSpecificToolState = toolState[t];\r\n    let scoord3d;\r\n\r\n    const capsToolType = t.toUpperCase();\r\n\r\n    const measurementGroupContentItemsForTool = measurementGroupContentItems.filter(mg => {\r\n      const imageRegionContentItem = toArray(mg.ContentSequence).find(\r\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGE_REGION\r\n      );\r\n\r\n      return imageRegionContentItem.GraphicType === capsToolType;\r\n    });\r\n\r\n    toolSpecificToolState.forEach((coordinates, index) => {\r\n      const properties = {};\r\n\r\n      const options = {\r\n        coordinates,\r\n        frameOfReferenceUID: FrameOfReferenceUID,\r\n      };\r\n\r\n      if (t === 'Polygon') {\r\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polygon(options);\r\n      } else if (t === 'Polyline') {\r\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polyline(options);\r\n      } else if (t === 'Point') {\r\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Point(options);\r\n      } else if (t === 'Ellipse') {\r\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Ellipse(options);\r\n      } else {\r\n        throw new Error('Unsupported tool type');\r\n      }\r\n\r\n      const measurementGroup = measurementGroupContentItemsForTool[index];\r\n      const findingGroup = toArray(measurementGroup.ContentSequence).find(\r\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.FINDING\r\n      );\r\n\r\n      const trackingGroup = toArray(measurementGroup.ContentSequence).find(\r\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER\r\n      );\r\n\r\n      /**\r\n       * Extract presentation state from tracking identifier.\r\n       * Currently is stored in SR but should be stored in its tags.\r\n       */\r\n      if (trackingGroup) {\r\n        const regExp = /\\(([^)]+)\\)/;\r\n        const matches = regExp.exec(trackingGroup.TextValue);\r\n        if (matches && matches[1]) {\r\n          properties.presentationState = JSON.parse(matches[1]);\r\n          properties.marker = properties.presentationState.marker;\r\n        }\r\n      }\r\n\r\n      let measurements = toArray(measurementGroup.ContentSequence).filter(ci =>\r\n        [\r\n          DCM_CODE_VALUES.LENGTH,\r\n          DCM_CODE_VALUES.AREA,\r\n          DCM_CODE_VALUES.SHORT_AXIS,\r\n          DCM_CODE_VALUES.LONG_AXIS,\r\n          DCM_CODE_VALUES.ELLIPSE_AREA,\r\n        ].includes(ci.ConceptNameCodeSequence.CodeValue)\r\n      );\r\n\r\n      let evaluations = toArray(measurementGroup.ContentSequence).filter(ci =>\r\n        [DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER].includes(ci.ConceptNameCodeSequence.CodeValue)\r\n      );\r\n\r\n      /**\r\n       * TODO: Resolve bug in DCMJS.\r\n       * ConceptNameCodeSequence should be a sequence with only one item.\r\n       */\r\n      evaluations = evaluations.map(evaluation => {\r\n        const e = { ...evaluation };\r\n        e.ConceptNameCodeSequence = toArray(e.ConceptNameCodeSequence);\r\n        return e;\r\n      });\r\n\r\n      /**\r\n       * TODO: Resolve bug in DCMJS.\r\n       * ConceptNameCodeSequence should be a sequence with only one item.\r\n       */\r\n      measurements = measurements.map(measurement => {\r\n        const m = { ...measurement };\r\n        m.ConceptNameCodeSequence = toArray(m.ConceptNameCodeSequence);\r\n        return m;\r\n      });\r\n\r\n      if (measurements && measurements.length) {\r\n        properties.measurements = measurements;\r\n        console.log('[SR] retrieving measurements...', measurements);\r\n      }\r\n\r\n      if (evaluations && evaluations.length) {\r\n        properties.evaluations = evaluations;\r\n        console.log('[SR] retrieving evaluations...', evaluations);\r\n      }\r\n\r\n      const roi = new DICOMMicroscopyViewer.roi.ROI({ scoord3d, properties });\r\n      rois.push(roi);\r\n\r\n      if (findingGroup) {\r\n        labels.push(findingGroup.ConceptCodeSequence.CodeValue);\r\n      } else {\r\n        labels.push('');\r\n      }\r\n    });\r\n  });\r\n\r\n  return { rois, labels };\r\n}\r\n\r\nfunction _getMeasurementGroups(naturalizedDataset) {\r\n  const { ContentSequence } = naturalizedDataset;\r\n\r\n  const imagingMeasurementsContentItem = ContentSequence.find(\r\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGING_MEASUREMENTS\r\n  );\r\n\r\n  const measurementGroupContentItems = toArray(\r\n    imagingMeasurementsContentItem.ContentSequence\r\n  ).filter(ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP);\r\n\r\n  return measurementGroupContentItems;\r\n}\r\n","import OHIF, { DicomMetadataStore } from '@ohif/core';\r\nimport loadSR from './utils/loadSR';\r\nimport toArray from './utils/toArray';\r\nimport DCM_CODE_VALUES from './utils/dcmCodeValues';\r\nimport getSourceDisplaySet from './utils/getSourceDisplaySet';\r\n\r\nconst { utils } = OHIF;\r\n\r\nconst SOP_CLASS_UIDS = {\r\n  COMPREHENSIVE_3D_SR: '1.2.840.10008.5.1.4.1.1.88.34',\r\n};\r\n\r\nconst SOPClassHandlerId =\r\n  '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler';\r\n\r\nfunction _getReferencedFrameOfReferenceUID(naturalizedDataset) {\r\n  const { ContentSequence } = naturalizedDataset;\r\n\r\n  const imagingMeasurementsContentItem = ContentSequence.find(\r\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGING_MEASUREMENTS\r\n  );\r\n\r\n  const firstMeasurementGroupContentItem = toArray(\r\n    imagingMeasurementsContentItem.ContentSequence\r\n  ).find(ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP);\r\n\r\n  const imageRegionContentItem = toArray(firstMeasurementGroupContentItem.ContentSequence).find(\r\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGE_REGION\r\n  );\r\n\r\n  return imageRegionContentItem.ReferencedFrameOfReferenceUID;\r\n}\r\n\r\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\r\n  // If the series has no instances, stop here\r\n  if (!instances || !instances.length) {\r\n    throw new Error('No instances were provided');\r\n  }\r\n\r\n  const { displaySetService, microscopyService } = servicesManager.services;\r\n\r\n  const instance = instances[0];\r\n\r\n  // TODO ! Consumption of DICOMMicroscopySRSOPClassHandler to a derived dataset or normal dataset?\r\n  // TODO -> Easy to swap this to a \"non-derived\" displaySet, but unfortunately need to put it in a different extension.\r\n  const naturalizedDataset = DicomMetadataStore.getSeries(\r\n    instance.StudyInstanceUID,\r\n    instance.SeriesInstanceUID\r\n  ).instances[0];\r\n  const ReferencedFrameOfReferenceUID = _getReferencedFrameOfReferenceUID(naturalizedDataset);\r\n\r\n  const {\r\n    FrameOfReferenceUID,\r\n    SeriesDescription,\r\n    ContentDate,\r\n    ContentTime,\r\n    SeriesNumber,\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SOPClassUID,\r\n  } = instance;\r\n\r\n  const displaySet = {\r\n    plugin: 'microscopy',\r\n    Modality: 'SR',\r\n    altImageText: 'Microscopy SR',\r\n    displaySetInstanceUID: utils.guid(),\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    ReferencedFrameOfReferenceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    SeriesDescription,\r\n    // Map the content date/time to the series date/time, these are only used for filtering.\r\n    SeriesDate: ContentDate,\r\n    SeriesTime: ContentTime,\r\n    SeriesNumber,\r\n    instance,\r\n    metadata: naturalizedDataset,\r\n    isDerived: true,\r\n    isLoading: false,\r\n    isLoaded: false,\r\n    loadError: false,\r\n  };\r\n\r\n  displaySet.load = function (referencedDisplaySet) {\r\n    return loadSR(microscopyService, displaySet, referencedDisplaySet).catch(error => {\r\n      displaySet.isLoaded = false;\r\n      displaySet.loadError = true;\r\n      throw new Error(error);\r\n    });\r\n  };\r\n\r\n  displaySet.getSourceDisplaySet = function () {\r\n    let allDisplaySets = [];\r\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n    studyMetadata.series.forEach(series => {\r\n      const displaySets = displaySetService.getDisplaySetsForSeries(series.SeriesInstanceUID);\r\n      allDisplaySets = allDisplaySets.concat(displaySets);\r\n    });\r\n    return getSourceDisplaySet(allDisplaySets, displaySet);\r\n  };\r\n\r\n  return [displaySet];\r\n}\r\n\r\nexport default function getDicomMicroscopySRSopClassHandler({ servicesManager, extensionManager }) {\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n\r\n  return {\r\n    name: 'DicomMicroscopySRSopClassHandler',\r\n    sopClassUids: [SOP_CLASS_UIDS.COMPREHENSIVE_3D_SR],\r\n    getDisplaySetsFromSeries,\r\n  };\r\n}\r\n","/**\r\n * Get referenced SM displaySet from SR displaySet\r\n *\r\n * @param {*} allDisplaySets\r\n * @param {*} microscopySRDisplaySet\r\n * @returns\r\n */\r\nexport default function getSourceDisplaySet(allDisplaySets, microscopySRDisplaySet) {\r\n  const { ReferencedFrameOfReferenceUID } = microscopySRDisplaySet;\r\n\r\n  const otherDisplaySets = allDisplaySets.filter(\r\n    ds => ds.displaySetInstanceUID !== microscopySRDisplaySet.displaySetInstanceUID\r\n  );\r\n  const referencedDisplaySet = otherDisplaySets.find(\r\n    displaySet =>\r\n      displaySet.Modality === 'SM' &&\r\n      (displaySet.FrameOfReferenceUID === ReferencedFrameOfReferenceUID ||\r\n        // sometimes each depth instance has the different FrameOfReferenceID\r\n        displaySet.othersFrameOfReferenceUID.includes(ReferencedFrameOfReferenceUID))\r\n  );\r\n\r\n  if (!referencedDisplaySet && otherDisplaySets.length >= 1) {\r\n    console.warn(\r\n      'No display set with FrameOfReferenceUID',\r\n      ReferencedFrameOfReferenceUID,\r\n      'single series, assuming data error, defaulting to only series.'\r\n    );\r\n    return otherDisplaySets.find(displaySet => displaySet.Modality === 'SM');\r\n  }\r\n\r\n  return referencedDisplaySet;\r\n}\r\n","import { id } from './id';\r\nimport React, { Suspense, useMemo } from 'react';\r\nimport getPanelModule from './getPanelModule';\r\nimport getCommandsModule from './getCommandsModule';\r\nimport { Types } from '@ohif/core';\r\n\r\nimport { useViewportGrid } from '@ohif/ui';\r\nimport getDicomMicroscopySopClassHandler from './DicomMicroscopySopClassHandler';\r\nimport getDicomMicroscopySRSopClassHandler from './DicomMicroscopySRSopClassHandler';\r\nimport MicroscopyService from './services/MicroscopyService';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import('./DicomMicroscopyViewport');\r\n});\r\n\r\nconst MicroscopyViewport = props => {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nconst extension: Types.Extensions.Extension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n\r\n  async preRegistration({ servicesManager }) {\r\n    servicesManager.registerService(MicroscopyService.REGISTRATION(servicesManager));\r\n  },\r\n\r\n  /**\r\n   * ViewportModule should provide a list of viewports that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each viewport is defined by\r\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\r\n   * that is provided by the Cornerstone extension in OHIF.\r\n   */\r\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\r\n    /**\r\n     *\r\n     * @param props {*}\r\n     * @param props.displaySets\r\n     * @param props.viewportId\r\n     * @param props.viewportLabel\r\n     * @param props.dataSource\r\n     * @param props.viewportOptions\r\n     * @param props.displaySetOptions\r\n     * @returns\r\n     */\r\n    const ExtendedMicroscopyViewport = props => {\r\n      const { viewportOptions } = props;\r\n\r\n      const [viewportGrid, viewportGridService] = useViewportGrid();\r\n      const { activeViewportId } = viewportGrid;\r\n\r\n      // a unique identifier based on the contents of displaySets.\r\n      // since we changed our rendering pipeline and if there is no\r\n      // element size change nor viewportId change we won't re-render\r\n      // we need a way to force re-rendering when displaySets change.\r\n      const displaySetsKey = useMemo(() => {\r\n        return props.displaySets.map(ds => ds.displaySetInstanceUID).join('-');\r\n      }, [props.displaySets]);\r\n\r\n      return (\r\n        <MicroscopyViewport\r\n          key={displaySetsKey}\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          commandsManager={commandsManager}\r\n          activeViewportId={activeViewportId}\r\n          setViewportActive={(viewportId: string) => {\r\n            viewportGridService.setActiveViewportId(viewportId);\r\n          }}\r\n          viewportData={viewportOptions}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [\r\n      {\r\n        name: 'microscopy-dicom',\r\n        component: ExtendedMicroscopyViewport,\r\n      },\r\n    ];\r\n  },\r\n\r\n  getToolbarModule({ servicesManager }) {\r\n    return [\r\n      {\r\n        name: 'evaluate.microscopyTool',\r\n        evaluate: ({ button }) => {\r\n          const { microscopyService } = servicesManager.services;\r\n\r\n          const activeInteractions = microscopyService.getActiveInteractions();\r\n          if (!activeInteractions) {\r\n            return false;\r\n          }\r\n          const isPrimaryActive = activeInteractions.find(interactions => {\r\n            const sameMouseButton = interactions[1].bindings.mouseButtons.includes('left');\r\n\r\n            if (!sameMouseButton) {\r\n              return false;\r\n            }\r\n\r\n            const notDraw = interactions[0] !== 'draw';\r\n\r\n            // there seems to be a custom logic for draw tool for some reason\r\n            return notDraw\r\n              ? interactions[0] === button.id\r\n              : interactions[1].geometryType === button.id;\r\n          });\r\n\r\n          return {\r\n            disabled: false,\r\n            className: isPrimaryActive\r\n              ? '!text-black bg-primary-light'\r\n              : '!text-common-bright hover:!bg-primary-dark hover:!text-primary-light',\r\n            // Todo: isActive right now is used for nested buttons where the primary\r\n            // button needs to be fully rounded (vs partial rounded) when active\r\n            // otherwise it does not have any other use\r\n            isActive: isPrimaryActive,\r\n          };\r\n        },\r\n      },\r\n    ];\r\n  },\r\n\r\n  /**\r\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\r\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\r\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\r\n   * Examples include the default sop class handler provided by the default extension\r\n   */\r\n  getSopClassHandlerModule({ servicesManager, commandsManager, extensionManager }) {\r\n    return [\r\n      getDicomMicroscopySopClassHandler({\r\n        servicesManager,\r\n        extensionManager,\r\n      }),\r\n      getDicomMicroscopySRSopClassHandler({\r\n        servicesManager,\r\n        extensionManager,\r\n      }),\r\n    ];\r\n  },\r\n\r\n  getPanelModule,\r\n\r\n  getCommandsModule,\r\n};\r\n\r\nexport default extension;\r\n","import React from 'react';\r\nimport { CommandsManager, ExtensionManager } from '@ohif/core';\r\nimport { useViewportGrid } from '@ohif/ui';\r\nimport MicroscopyPanel from './components/MicroscopyPanel/MicroscopyPanel';\r\n\r\n// TODO:\r\n// - No loading UI exists yet\r\n// - cancel promises when component is destroyed\r\n// - show errors in UI for thumbnails if promise fails\r\n\r\nexport default function getPanelModule({\r\n  commandsManager,\r\n  extensionManager,\r\n  servicesManager,\r\n}: {\r\n  servicesManager: AppTypes.ServicesManager;\r\n  commandsManager: CommandsManager;\r\n  extensionManager: ExtensionManager;\r\n}) {\r\n  const wrappedMeasurementPanel = () => {\r\n    const [{ activeViewportId, viewports }] = useViewportGrid();\r\n\r\n    return (\r\n      <MicroscopyPanel\r\n        viewports={viewports}\r\n        activeViewportId={activeViewportId}\r\n        onSaveComplete={() => {}}\r\n        onRejectComplete={() => {}}\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n        extensionManager={extensionManager}\r\n      />\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'measure',\r\n      iconName: 'tab-linear',\r\n      iconLabel: 'Measure',\r\n      label: 'Measurements',\r\n      secondaryLabel: 'Measurements',\r\n      component: wrappedMeasurementPanel,\r\n    },\r\n  ];\r\n}\r\n","import { CommandsManager, ExtensionManager } from '@ohif/core';\r\nimport styles from './utils/styles';\r\nimport callInputDialog from './utils/callInputDialog';\r\n\r\nexport default function getCommandsModule({\r\n  servicesManager,\r\n  commandsManager,\r\n  extensionManager,\r\n}: {\r\n  servicesManager: AppTypes.ServicesManager;\r\n  commandsManager: CommandsManager;\r\n  extensionManager: ExtensionManager;\r\n}) {\r\n  const { viewportGridService, uiDialogService, microscopyService } = servicesManager.services;\r\n\r\n  const actions = {\r\n    // Measurement tool commands:\r\n    deleteMeasurement: ({ uid }) => {\r\n      if (uid) {\r\n        const roiAnnotation = microscopyService.getAnnotation(uid);\r\n        if (roiAnnotation) {\r\n          microscopyService.removeAnnotation(roiAnnotation);\r\n        }\r\n      }\r\n    },\r\n\r\n    setLabel: ({ uid }) => {\r\n      const roiAnnotation = microscopyService.getAnnotation(uid);\r\n\r\n      callInputDialog({\r\n        uiDialogService,\r\n        defaultValue: '',\r\n        callback: (value: string, action: string) => {\r\n          switch (action) {\r\n            case 'save': {\r\n              roiAnnotation.setLabel(value);\r\n              microscopyService.triggerRelabel(roiAnnotation);\r\n            }\r\n          }\r\n        },\r\n      });\r\n    },\r\n\r\n    setToolActive: ({ toolName, toolGroupId = 'MICROSCOPY' }) => {\r\n      const dragPanOnMiddle = [\r\n        'dragPan',\r\n        {\r\n          bindings: {\r\n            mouseButtons: ['middle'],\r\n          },\r\n        },\r\n      ];\r\n      const dragZoomOnRight = [\r\n        'dragZoom',\r\n        {\r\n          bindings: {\r\n            mouseButtons: ['right'],\r\n          },\r\n        },\r\n      ];\r\n      if (\r\n        ['line', 'box', 'circle', 'point', 'polygon', 'freehandpolygon', 'freehandline'].indexOf(\r\n          toolName\r\n        ) >= 0\r\n      ) {\r\n        // TODO: read from configuration\r\n        const options = {\r\n          geometryType: toolName,\r\n          vertexEnabled: true,\r\n          styleOptions: styles.default,\r\n          bindings: {\r\n            mouseButtons: ['left'],\r\n          },\r\n        } as any;\r\n        if ('line' === toolName) {\r\n          options.minPoints = 2;\r\n          options.maxPoints = 2;\r\n        } else if ('point' === toolName) {\r\n          delete options.styleOptions;\r\n          delete options.vertexEnabled;\r\n        }\r\n\r\n        microscopyService.activateInteractions([\r\n          ['draw', options],\r\n          dragPanOnMiddle,\r\n          dragZoomOnRight,\r\n        ]);\r\n      } else if (toolName == 'dragPan') {\r\n        microscopyService.activateInteractions([\r\n          [\r\n            'dragPan',\r\n            {\r\n              bindings: {\r\n                mouseButtons: ['left', 'middle'],\r\n              },\r\n            },\r\n          ],\r\n          dragZoomOnRight,\r\n        ]);\r\n      } else {\r\n        microscopyService.activateInteractions([\r\n          [\r\n            toolName,\r\n            {\r\n              bindings: {\r\n                mouseButtons: ['left'],\r\n              },\r\n            },\r\n          ],\r\n          dragPanOnMiddle,\r\n          dragZoomOnRight,\r\n        ]);\r\n      }\r\n    },\r\n    toggleOverlays: () => {\r\n      // overlay\r\n      const overlays = document.getElementsByClassName('microscopy-viewport-overlay');\r\n      let onoff = false; // true if this will toggle on\r\n      for (let i = 0; i < overlays.length; i++) {\r\n        if (i === 0) {\r\n          onoff = overlays.item(0).classList.contains('hidden');\r\n        }\r\n        overlays.item(i).classList.toggle('hidden');\r\n      }\r\n\r\n      // overview\r\n      const { activeViewportId } = viewportGridService.getState();\r\n      microscopyService.toggleOverviewMap(activeViewportId);\r\n    },\r\n    toggleAnnotations: () => {\r\n      microscopyService.toggleROIsVisibility();\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    deleteMeasurement: {\r\n      commandFn: actions.deleteMeasurement,\r\n    },\r\n    setLabel: {\r\n      commandFn: actions.setLabel,\r\n    },\r\n    setToolActive: {\r\n      commandFn: actions.setToolActive,\r\n    },\r\n    toggleOverlays: {\r\n      commandFn: actions.toggleOverlays,\r\n    },\r\n    toggleAnnotations: {\r\n      commandFn: actions.toggleAnnotations,\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'MICROSCOPY',\r\n  };\r\n}\r\n"],"names":["id","packageJson","coordinateFormatScoord3d2Geometry","coordinates","pyramid","transform","Array","isArray","metadata","length","orientation","ImageOrientationSlide","spacing","PixelSpacing","functionalGroup","SharedFunctionalGroupsSequence","PixelMeasuresSequence","_getPixelSpacing","origin","TotalPixelMatrixOriginSequence","offset","Number","XOffsetInSlideCoordinateSystem","YOffsetInSlideCoordinateSystem","map","c","slideCoord","pixelCoord","options","Error","point","m","mInverted","inv","vSlide","vImage","multiply","row","toFixed","mapSlideCoord2PixelCoord","defaultFill","color","emptyFill","defaultStroke","width","activeStroke","active","image","circle","fill","stroke","radius","default","ApiEvents","ROI_ADDED","ROI_MODIFIED","ROI_REMOVED","ROI_DRAWN","ROI_SELECTED","MOVE_STARTED","MOVE_ENDED","LOADING_STARTED","LOADING_ENDED","LOADING_ERROR","FRAME_LOADING_STARTED","FRAME_LOADING_ENDED","FRAME_LOADING_ERROR","EVENTS","ADDED","MODIFIED","REMOVED","UPDATED","SELECTED","ViewerManager","PubSubService","constructor","viewer","viewportId","container","studyInstanceUID","seriesInstanceUID","super","this","onRoiAdded","roiAddedHandler","bind","onRoiModified","roiModifiedHandler","onRoiRemoved","roiRemovedHandler","onRoiSelected","roiSelectedHandler","contextMenuCallback","symbols","Object","getOwnPropertySymbols","_drawingSource","find","p","description","_pyramid","_map","_affine","registerEvents","activateDefaultInteractions","addContextMenuCallback","callback","destroy","unregisterEvents","publish","key","roiGraphic","_broadcastEvent","managedViewer","addEventListener","removeEventListener","event","detail","payload","runSilently","clearRoiGraphics","removeAllROIs","showROIs","hideROIs","addRoiGraphic","addROI","styles","addRoiGraphicWithLabel","label","setROIStyle","uid","styleOptions","removeRoiGraphic","removeROI","updateROIProperties","properties","updateROI","toggleOverviewMap","document","querySelector","preventDefault","activateInteractions","bindings","mouseButtons","interactions","interactionsMap","draw","activate","modify","translate","snap","dragPan","dragZoom","select","keys","forEach","availableInteractionName","interaction","name","config","activateInteractionMethod","deactivateInteractionMethod","_getMapView","_getMap","getView","s","String","window","getViewState","view","center","getCenter","resolution","getResolution","zoom","getZoom","setViewState","viewState","setZoom","setResolution","setCenter","setViewStateByExtent","roiAnnotation","getCoordinates","_jumpToPolyline","_jumpToPolygonOrEllipse","_jumpToPoint","coord","mappedCoord","x","y","midpoint","minX","Infinity","maxX","minY","maxY","height","fit","getSize","LABEL_UPDATED","GRAPHIC_UPDATED","VIEW_UPDATED","RoiAnnotation","setMeasurements","getScoord3d","scoord3d","setRoiGraphic","type","graphicType","graphicData","point1","point2","xLength2","yLength2","Math","sqrt","areaEllipse","PI","_area","_length","undefined","areaPolygon","n","area","j","i","abs","areaOfPolygon","len","p1","p2","xLen","yLen","setLabel","finding","CodeMeaning","CodingSchemeDesignator","CodeValue","getLabel","getDetailedLabel","getLength","getArea","ANNOTATION_UPDATED","ANNOTATION_SELECTED","ANNOTATION_REMOVED","RELABEL","DELETE","MicroscopyService","servicesManager","managedViewers","Set","roiUids","annotations","selectedAnnotation","pendingFocus","_onRoiAdded","_onRoiModified","_onRoiRemoved","_onRoiUpdated","_onRoiSelected","isROIsVisible","clear","clearAnnotations","removeAnnotation","data","add","subscribe","AnnotationEvents","onRelabel","item","triggerRelabel","getAnnotation","delete","synchronizeViewers","getSelectedAnnotation","clearSelection","_addManagedViewerSubscriptions","_roiAddedSubscription","ViewerEvents","_roiModifiedSubscription","_roiRemovedSubscription","_roiUpdatedSubscription","_roiSelectedSubscription","_removeManagedViewerSubscriptions","unsubscribe","_getManagedViewersForSeries","from","filter","getManagedViewersForStudy","_restoreAnnotations","getAnnotationsForSeries","addViewer","_manager","focusAnnotation","_potentiallyLoadSR","StudyInstanceUID","displaySets","studyMetadata","DicomMetadataStore","getStudy","smDisplaySet","ds","Modality","FrameOfReferenceUID","othersFrameOfReferenceUID","derivedDisplaySets","ReferencedFrameOfReferenceUID","includes","some","isLoaded","recentDateTime","recentDisplaySet","dateTime","SeriesDate","SeriesTime","isLoading","load","removeViewer","toggleROIsVisibility","mv","getAnnotations","push","getAnnotationsForStudy","a","annotation","selectAnnotation","baseManagedViewer","activeInteractions","getActiveInteractions","newAnnotation","deleteCallback","successCallback","triggerDelete","_MicroscopyService","REGISTRATION","altName","create","configuration","callInputDialog","uiDialogService","title","defaultValue","value","action","dialogId","onSubmitHandler","dismiss","centralize","isDraggable","showOverlay","content","Dialog","contentProps","noCloseButton","onClose","actions","text","ButtonEnums","secondary","primary","onSubmit","body","setValue","React","Input","labelClassName","autoFocus","className","onChange","persist","target","onKeyPress","datasetToBuffer","dcmjs","formatLength","unit","mult","connectedMicroscopyPanel","withTranslation","props","microscopyService","services","setStudyInstanceUID","useState","roiAnnotations","setRoiAnnotations","setSelectedAnnotation","extensionManager","displaySetService","useEffect","viewport","viewports","get","activeViewportId","displaySetInstanceUIDs","displaySet","getDisplaySetByUID","onAnnotationUpdated","onAnnotationSelected","unsubscribeAnnotationUpdated","MicroscopyEvents","unsubscribeAnnotationSelected","unsubscribeAnnotationRemoved","onAnnotationRemoved","index","shortAxisLength","isSelected","displayText","formatArea","isActive","MeasurementTable","onClick","onMeasurementItemClickHandler","onEdit","onMeasurementItemEditHandler","commandsManager","runCommand","onDelete","onMeasurementDeleteHandler","utils","OHIF","SOP_CLASS_UIDS","SOPClassHandlerId","getDicomMicroscopySopClassHandler","sopClassUids","getDisplaySetsFromSeries","instances","instance","singleFrameInstance","currentFrames","NumberOfFrames","instanceI","framesI","imageIdForThumbnail","imageId","getActiveDataSource","getImageIdsForInstance","thumbnail","SeriesDescription","ContentDate","ContentTime","SeriesNumber","SeriesInstanceUID","SOPInstanceUID","SOPClassUID","inst","v","array","indexOf","console","warn","plugin","altImageText","displaySetInstanceUID","guid","firstInstance","numImageFrames","numInstances","others","_getDisplaySetsFromSeries","IMAGING_MEASUREMENTS","MEASUREMENT_GROUP","IMAGE_REGION","FINDING","TRACKING_UNIQUE_IDENTIFIER","LENGTH","AREA","SHORT_AXIS","LONG_AXIS","ELLIPSE_AREA","toArray","MeasurementReport","DICOMMicroscopyViewer","async","loadSR","microscopySRDisplaySet","referencedDisplaySet","naturalizedDataset","rois","labels","toolState","generateToolState","tools","getOwnPropertyNames","measurementGroupContentItems","ContentSequence","ci","ConceptNameCodeSequence","DCM_CODE_VALUES","_getMeasurementGroups","t","toolSpecificToolState","capsToolType","toUpperCase","measurementGroupContentItemsForTool","mg","GraphicType","frameOfReferenceUID","Polygon","Polyline","Point","Ellipse","measurementGroup","findingGroup","trackingGroup","matches","exec","TextValue","presentationState","JSON","parse","marker","measurements","evaluations","evaluation","e","measurement","log","roi","ROI","ConceptCodeSequence","_getROIsFromToolState","getSeries","firstMeasurementGroupContentItem","_getReferencedFrameOfReferenceUID","isDerived","loadError","catch","error","getSourceDisplaySet","allDisplaySets","series","getDisplaySetsForSeries","concat","otherDisplaySets","getDicomMicroscopySRSopClassHandler","Component","MicroscopyViewport","Suspense","fallback","extension","preRegistration","registerService","getViewportModule","component","viewportOptions","viewportGrid","viewportGridService","useViewportGrid","displaySetsKey","useMemo","join","_extends","setViewportActive","setActiveViewportId","viewportData","getToolbarModule","evaluate","button","isPrimaryActive","geometryType","disabled","getSopClassHandlerModule","getPanelModule","iconName","iconLabel","secondaryLabel","wrappedMeasurementPanel","MicroscopyPanel","onSaveComplete","onRejectComplete","getCommandsModule","deleteMeasurement","setToolActive","toolName","toolGroupId","dragPanOnMiddle","dragZoomOnRight","vertexEnabled","minPoints","maxPoints","toggleOverlays","overlays","getElementsByClassName","onoff","classList","contains","toggle","getState","toggleAnnotations","definitions","commandFn","defaultContext"],"sourceRoot":""}